Creado el 2025-08-04 12:05:30

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\.env
# backend/.env
SECRET_KEY=mysecret
DATABASE_URL=sqlite:///./app.db
#DATABASE_URL=sqlite:///backend/app.db

HUGGINGFACE_MODEL=CAiRE/SER-wav2vec2-large-xlsr-53-eng-zho-elderly

# per√≠metro CORS (separado por comas)
CORS_ORIGINS=http://localhost:3000,http://localhost:5173

# Umbral m√≠nimo para alertas
ALERT_THRESHOLD=0.05


----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\.env.example
# Seguridad
SECRET_KEY=tu_jwt_secret
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=60

# Base de datos
DATABASE_URL=postgresql://user:pass@localhost:5432/emotions_db

# IA
HUGGINGFACE_MODEL=CAiRE/SER-wav2vec2-large-xlsr-53-eng-zho-elderly
STORAGE_PATH=./data/audios

# CORS
CORS_ORIGINS=http://localhost:3000

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\alembic.ini
# backend/alembic.ini

[alembic]
# carpeta que contiene env.py y versions/
script_location = alembic
# URL de tu base de datos real
# sqlalchemy.url = sqlite:///./app.db
sqlalchemy.url = sqlite:///C:/americo/ia_dema/z-proyeto_final/emotion-elderly-app/app.db

# a√±ade backend al PYTHONPATH si lo necesitas
prepend_sys_path = .

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\alembic\env.py
#C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\alembic\env.py
#env.py

# backend/alembic/env.py

import sys
import os

# A√±ade 'backend' al PYTHONPATH para que 'app' sea resoluble
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from logging.config import fileConfig
from sqlalchemy import engine_from_config, pool
from alembic import context

from app.core.config import settings
from app.db.base import Base

# Importa tus modelos para que Base.metadata los conozca
import app.models.user
import app.models.role
import app.models.audio
import app.models.emotion
import app.models.alert

# metadata que Alembic usar√° para autogenerar
target_metadata = Base.metadata

# Carga configuraci√≥n de alembic.ini
config = context.config
fileConfig(config.config_file_name)
config.set_main_option("sqlalchemy.url", str(settings.DATABASE_URL))


def run_migrations_offline():
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
    )
    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    connectable = engine_from_config(
        config.get_section(config.config_ini_section),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )
    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
        )
        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
    
----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\alembic\script.py.mako
"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
${imports if imports else ""}

# revision identifiers, used by Alembic.
revision: str = ${repr(up_revision)}
down_revision: Union[str, Sequence[str], None] = ${repr(down_revision)}
branch_labels: Union[str, Sequence[str], None] = ${repr(branch_labels)}
depends_on: Union[str, Sequence[str], None] = ${repr(depends_on)}


def upgrade() -> None:
    """Upgrade schema."""
    ${upgrades if upgrades else "pass"}


def downgrade() -> None:
    """Downgrade schema."""
    ${downgrades if downgrades else "pass"}

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\database.py
# backend/app/database.py

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

from app.core.config import settings

# Declarative base para tus modelos
Base = declarative_base()

# URL √∫nica para la BD (sqlite, postgres, mysql, etc.)
DATABASE_URL = settings.DATABASE_URL

# Par√°metros de conexi√≥n espec√≠ficos para SQLite
connect_args = {"check_same_thread": False} if DATABASE_URL.startswith("sqlite") else {}

# Crear el engine
engine = create_engine(
    DATABASE_URL,
    connect_args=connect_args
)

# Sesi√≥n local para dependencias
SessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine
)

def get_db():
    """
    Dependencia de FastAPI para obtener una sesi√≥n de DB.
    Y la cierra al terminar la request.
    """
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\main.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\main.py
# main.py

# backend/app/main.py

from fastapi import FastAPI, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.openapi.utils import get_openapi

from app.core.security import get_current_user, get_current_user_optional
from app.core.config import settings
from app.core.logger import configure_logging
from app.core.metrics import get_metrics_app, metrics_middleware
from app.api.routers import auth, users, audios, analyze, alerts

# üîß Configurar logging
configure_logging()

# üîê Crear instancia de FastAPI
app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    openapi_url="/openapi.json",
    docs_url="/docs",
    redoc_url="/redoc",
)

# üîê Personalizar OpenAPI para activar bot√≥n "Authorize"
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title=settings.PROJECT_NAME,
        version=settings.VERSION,
        description="API para an√°lisis de emociones en adultos mayores",
        routes=app.routes,
    )
    openapi_schema["components"]["securitySchemes"] = {
        "BearerAuth": {
            "type": "http",  # ‚Üê CORREGIDO: antes era SecuritySchemeType.HTTP
            "scheme": "bearer",
            "bearerFormat": "JWT"
        }
    }
    for path in openapi_schema["paths"].values():
        for method in path.values():
            method["security"] = [{"BearerAuth": []}]
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi

# üìä M√©tricas
metrics_app = get_metrics_app()
app.mount("/static", StaticFiles(directory="app/templates/static"), name="static")
app.middleware("http")(metrics_middleware)

# üåê CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üßæ Templates
templates = Jinja2Templates(directory="app/templates")

# üè† Home
@app.get("/", tags=["root"])
async def index(request: Request, user=Depends(get_current_user_optional)):
    return templates.TemplateResponse("index.html", {"request": request, "user": user})

# üßæ Templates
templates = Jinja2Templates(directory="app/templates")

# üîì Logout
@app.get("/logout", tags=["auth"])
async def logout():
    resp = RedirectResponse("/", status_code=303)
    resp.delete_cookie("access_token")
    return resp

# üîå Routers
app.include_router(auth.router, prefix="/auth", tags=["auth"])
protected = [Depends(get_current_user)]
app.include_router(users.router,    prefix="/users",   tags=["users"],    dependencies=protected)
#app.include_router(audios.router,   prefix="/audios",  tags=["audios"],   dependencies=protected)
#app.include_router(audios.router, dependencies=protected)
app.include_router(audios.router, prefix="/audios", tags=["audios"], dependencies=protected)
app.include_router(analyze.router,  prefix="/analyze", tags=["analyze"],  dependencies=protected)
app.include_router(alerts.router,   prefix="/alerts",  tags=["alerts"],   dependencies=protected)

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\models.py
# backend/app/models.py

from datetime import datetime
from sqlalchemy import (
    Column,
    Integer,
    String,
    Boolean,
    DateTime,
    ForeignKey,
    Float,
)
from sqlalchemy.orm import relationship, declarative_base

Base = declarative_base()

class Role(Base):
    __tablename__ = "roles"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(50), unique=True, index=True, nullable=False)
    description = Column(String(255), nullable=True)

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, index=True, nullable=False)
    hashed_password = Column(String, nullable=False)
    is_active = Column(Boolean, default=True)
    audios = relationship("Audio", back_populates="user", cascade="all, delete")
    alerts = relationship("Alert", back_populates="user", cascade="all, delete")

class Audio(Base):
    __tablename__ = "audios"
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    file_path = Column(String, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    user = relationship("User", back_populates="audios")
    emotions = relationship("Emotion", back_populates="audio", cascade="all, delete")

class Emotion(Base):
    __tablename__ = "emotions"
    id = Column(Integer, primary_key=True, index=True)
    audio_id = Column(Integer, ForeignKey("audios.id"), nullable=False)
    label = Column(String(50), nullable=False)
    confidence = Column(Float, nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow)
    audio = relationship("Audio", back_populates="emotions")
    alerts = relationship("Alert", back_populates="emotion", cascade="all, delete")

class Alert(Base):
    __tablename__ = "alerts"
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    emotion_id = Column(Integer, ForeignKey("emotions.id"), nullable=False)
    message = Column(String(255), nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    user = relationship("User", back_populates="alerts")
    emotion = relationship("Emotion", back_populates="alerts")

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\__init__.py

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\api\dependencies.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\api\dependencies.py
# dependencies.py
from fastapi import Depends, HTTPException, status
from sqlalchemy.orm import Session

from app.db.session import SessionLocal

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\api\errors.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\api\errors.py
# errors.py

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\api\routers\alerts.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\api\routers\alerts.py
# alerts.py
from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session

from app.api.dependencies import get_db
from app.core.security import get_current_user
from app.models import User, Audio, Alert, Emotion, Role
from app.schemas.alert import AlertList

router = APIRouter()

@router.get("/", response_model=AlertList, summary="Listar alertas")
def list_alerts(
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    alerts = db.query(Alert).filter(Alert.user_id == current_user.id).all()
    return AlertList(alerts=alerts)

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\api\routers\analyze copy.py
# backend/app/api/routers/analyze.py
from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session
import logging
from pathlib import Path
from typing import List

from app.api.dependencies import get_db
from app.core.security import get_current_user
from app.models import User, Audio, Alert, Emotion
from app.schemas.emotion import AnalysisResult, EmotionRead
from app.schemas.alert import AlertRead
from app.services.emotion_recognition import recognize_emotions
from app.core.config import settings

router = APIRouter()
logger = logging.getLogger(__name__)
#ALERT_THRESHOLD = 0.8
# ALERT_THRESHOLD ahora viene de .env
ALERT_THRESHOLD = settings.ALERT_THRESHOLD


# üîç Obtener resultados de an√°lisis de un audio
@router.get("/", response_model=AnalysisResult, summary="Obtener resultados de an√°lisis")
def get_analysis(
    audio_id: int = Query(...),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    audio = db.query(Audio).filter(Audio.id == audio_id, Audio.user_id == current_user.id).first()
    if not audio:
        raise HTTPException(status_code=404, detail="Audio no encontrado")

    emotions = db.query(Emotion).filter(Emotion.audio_id == audio.id).all()
    emotion_ids = [e.id for e in emotions]
    alerts = db.query(Alert).filter(Alert.emotion_id.in_(emotion_ids)).all()

    return AnalysisResult(
        audio_id=audio.id,
        emotions=emotions,
        alerts=alerts
    )

# üîÅ Ejecutar an√°lisis sobre un audio
@router.post("/", response_model=AnalysisResult, summary="Analizar emociones")
def analyze_audio(
    audio_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    audio = db.query(Audio).filter(Audio.id == audio_id, Audio.user_id == current_user.id).first()
    if not audio:
        raise HTTPException(status_code=404, detail="Audio no encontrado")

    path = Path(audio.file_path).expanduser().resolve()
    logger.info(f"üì• Analizando audio en: {path}")
    if not path.exists():
        raise HTTPException(status_code=404, detail=f"Audio no existe: {path}")

    try:
        results = recognize_emotions(str(path))
        logger.info(f"üîç Resultados del modelo: {results}")
    except FileNotFoundError as e:
        logger.error(str(e))
        raise HTTPException(status_code=404, detail=str(e))
    except RuntimeError as e:
        logger.error(str(e))
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))
    except Exception:
        logger.exception("Error interno al analizar emociones")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Fallo al analizar emociones")

    saved_emotions, generated_alerts = [], []
    for r in results:
        emo = Emotion(audio_id=audio.id, label=r["label"], confidence=r["score"])
        db.add(emo)
        db.commit()
        db.refresh(emo)
        saved_emotions.append(emo)
        logger.info(f"‚úÖ Emoci√≥n guardada: {emo.label} ({emo.confidence:.2f})")

        if r["score"] >= ALERT_THRESHOLD:
            msg = f"Detected {r['label']} with confidence {r['score']:.2f}"
            al = Alert(user_id=current_user.id, emotion_id=emo.id, message=msg)
            db.add(al)
            db.commit()
            db.refresh(al)
            generated_alerts.append(al)
            logger.info(f"üö® Alerta generada: {msg}")

    return AnalysisResult(
        audio_id=audio.id,
        emotions=saved_emotions,
        alerts=generated_alerts
    )

# üÜï Listar todas las emociones del usuario
@router.get("/emotions", response_model=List[EmotionRead], summary="Listar emociones por usuario")
def list_user_emotions(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    emotions = (
        db.query(Emotion)
        .join(Audio)
        .filter(Audio.user_id == current_user.id)
        .all()
    )
    return emotions

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\api\routers\analyze.py
# backend/app/api/routers/analyze.py
from fastapi import APIRouter, Depends, HTTPException, status, Query, BackgroundTasks
from sqlalchemy.orm import Session
from uuid import uuid4
import time

from app.api.dependencies import get_db
from app.core.security import get_current_user
from app.models import Audio, Emotion, Alert
from app.schemas.emotion import AnalysisResult, EmotionRead
from app.schemas.alert import AlertRead
from app.core.config import settings
from app.services.emotion_recognition import recognize_emotions
from app.db.session import SessionLocal

router = APIRouter()
JOBS: dict[str, dict] = {}

# üß† Funci√≥n que ejecuta el an√°lisis en segundo plano
def run_job(job_id: str, audio_id: int, user_id: int):
    db = SessionLocal()
    try:
        JOBS[job_id] = {"status": "running", "progress": 0, "audio_id": audio_id}
        time.sleep(0.1)
        JOBS[job_id]["progress"] = 10

        audio = db.query(Audio).filter(Audio.id == audio_id, Audio.user_id == user_id).first()
        if not audio:
            raise FileNotFoundError("Audio desaparecido en run_job")

        results = recognize_emotions(audio.file_path)
        JOBS[job_id]["progress"] = 60

        saved_emotions, generated_alerts = [], []
        for r in results:
            emo = Emotion(audio_id=audio_id, label=r["label"], confidence=r["score"])
            db.add(emo); db.commit(); db.refresh(emo)
            saved_emotions.append(emo)

            if r["score"] >= settings.ALERT_THRESHOLD:
                msg = f"Detected {r['label']} ({r['score']:.2f})"
                al = Alert(user_id=user_id, emotion_id=emo.id, message=msg)
                db.add(al); db.commit(); db.refresh(al)
                generated_alerts.append(al)

        emotions_payload = [EmotionRead.from_orm(e).dict() for e in saved_emotions]
        alerts_payload = [AlertRead.from_orm(a).dict() for a in generated_alerts]

        JOBS[job_id].update(
            status="done",
            progress=100,
            result={
                "audio_id": audio_id,
                "emotions": emotions_payload,
                "alerts": alerts_payload
            }
        )
    except Exception as e:
        JOBS[job_id].update(status="error", progress=100, result={"detail": str(e)})
    finally:
        db.close()

# üöÄ Iniciar an√°lisis
@router.post("/start", summary="Iniciar an√°lisis as√≠ncrono")
def start_analysis(
    background_tasks: BackgroundTasks,
    audio_id: int = Query(...),
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    audio = db.query(Audio).filter(Audio.id == audio_id, Audio.user_id == current_user.id).first()
    if not audio:
        raise HTTPException(404, "Audio no encontrado")

    job_id = uuid4().hex
    JOBS[job_id] = {"status": "pending", "progress": 0, "audio_id": audio_id}
    background_tasks.add_task(run_job, job_id, audio_id, current_user.id)
    return {"job_id": job_id}

# üìä Estado del job
@router.get("/status", summary="Estado de un job")
def get_status(job_id: str = Query(...)):
    job = JOBS.get(job_id)
    if not job:
        raise HTTPException(404, "Job no encontrado")
    return {
        "status": job["status"],
        "progress": job["progress"],
        "audio_id": job["audio_id"],
    }

# üìà Resultados por job_id
@router.get("/results", response_model=AnalysisResult, summary="Resultados de un job")
def get_results(job_id: str = Query(...)):
    job = JOBS.get(job_id)
    if not job:
        raise HTTPException(404, "Job no encontrado")
    if job["status"] != "done":
        raise HTTPException(status.HTTP_202_ACCEPTED, "Job a√∫n en ejecuci√≥n")
    return job["result"]

# üìã Todos los resultados del usuario
@router.get("/results/all", response_model=list[AnalysisResult], summary="Todos los resultados de an√°lisis")
def get_all_results(
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    audios = db.query(Audio).filter(Audio.user_id == current_user.id).all()
    results = []

    for audio in audios:
        emotions = db.query(Emotion).filter(Emotion.audio_id == audio.id).all()
        alerts = db.query(Alert).filter(Alert.emotion.has(audio_id=audio.id)).all()

        result = AnalysisResult(
            audio_id=audio.id,
            emotions=[EmotionRead.from_orm(e) for e in emotions],
            alerts=[AlertRead.from_orm(a) for a in alerts]
        )
        results.append(result)

    return results

# ‚úÖ NUEVO: Obtener resultados por audio_id
@router.get("/by-audio", response_model=AnalysisResult, summary="Resultados por audio_id")
def get_result_by_audio(
    audio_id: int = Query(...),
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    audio = db.query(Audio).filter(Audio.id == audio_id, Audio.user_id == current_user.id).first()
    if not audio:
        raise HTTPException(404, "Audio no encontrado")

    emotions = db.query(Emotion).filter(Emotion.audio_id == audio.id).all()
    alerts = db.query(Alert).filter(Alert.emotion.has(audio_id=audio.id)).all()

    return AnalysisResult(
        audio_id=audio.id,
        emotions=[EmotionRead.from_orm(e) for e in emotions],
        alerts=[AlertRead.from_orm(a) for a in alerts]
    )

# üìä Estado del job por audio_id
@router.get("/status/by-audio", summary="Estado del job por audio_id")
def get_status_by_audio(
    audio_id: int = Query(...),
    current_user = Depends(get_current_user)
):
    for job in JOBS.values():
        if job["audio_id"] == audio_id:
            return {
                "status": job["status"],
                "progress": job["progress"],
                "audio_id": job["audio_id"],
            }
    raise HTTPException(404, "No se encontr√≥ job para este audio")

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\api\routers\audios.py
# backend/app/api/routers/audios.py
from fastapi import (
    APIRouter, UploadFile, File,
    Depends, HTTPException, BackgroundTasks
)
from typing import List
from sqlalchemy.orm import Session
from uuid import uuid4
import os

from app.api.dependencies import get_db
from app.core.config import settings
from app.core.security import get_current_user
from app.models import Audio
from app.schemas.audio import AudioRead
from app.services.audio_processing import process_audio

router = APIRouter(tags=["audios"])

# ‚îÄ‚îÄ‚îÄ Subir un √∫nico audio ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.post(
    "/",
    response_model=AudioRead,
    summary="Subir un √∫nico audio"
)
async def upload_audio(
    background_tasks: BackgroundTasks,  # ‚úÖ primero
    file: UploadFile = File(...),
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    # Validaci√≥n MIME
    ALLOWED = {
        "audio/wav", "audio/x-wav",
        "audio/mpeg", "audio/mp3",
        "audio/x-m4a"
    }
    if file.content_type not in ALLOWED:
        raise HTTPException(400, f"Tipo no permitido: {file.content_type}")

    # Guardar en disco
    ext = os.path.splitext(file.filename)[1]
    name = f"{uuid4().hex}{ext}"
    save_dir = settings.STORAGE_PATH
    os.makedirs(save_dir, exist_ok=True)
    path = os.path.join(save_dir, name)

    content = await file.read()
    with open(path, "wb") as f:
        f.write(content)

    if not os.path.exists(path) or os.path.getsize(path) == 0:
        raise HTTPException(500, "Archivo no guardado correctamente")

    # Registrar en BD
    audio = Audio(user_id=current_user.id, file_path=path)
    db.add(audio)
    db.commit()
    db.refresh(audio)

    # ‚úÖ Lanzar el an√°lisis autom√°ticamente en segundo plano
    background_tasks.add_task(
        process_audio,
        audio.id,
        path,
        current_user.id
    )

    return audio

# ‚îÄ‚îÄ‚îÄ Subir y procesar m√∫ltiples audios ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.post(
    "/bulk",
    response_model=List[AudioRead],
    summary="Subir y procesar m√∫ltiples audios"
)
async def upload_bulk_audios(
    background_tasks: BackgroundTasks,
    files: List[UploadFile] = File(..., description="Archivos de audio"),
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    saved: List[Audio] = []

    for file in files:
        if not file.content_type.startswith("audio/"):
            raise HTTPException(400, f"Tipo no permitido: {file.content_type}")

        ext = os.path.splitext(file.filename)[1]
        name = f"{uuid4().hex}{ext}"
        save_dir = settings.STORAGE_PATH
        os.makedirs(save_dir, exist_ok=True)
        path = os.path.join(save_dir, name)

        content = await file.read()
        with open(path, "wb") as f:
            f.write(content)

        audio = Audio(user_id=current_user.id, file_path=path)
        db.add(audio)
        db.commit()
        db.refresh(audio)
        saved.append(audio)

        # ‚úÖ Lanzar el an√°lisis en background
        background_tasks.add_task(
            process_audio,
            audio.id,
            path,
            current_user.id
        )

    return saved

# ‚îÄ‚îÄ‚îÄ Listar audios del usuario ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.get(
    "/",
    response_model=List[AudioRead],
    summary="Listar audios del usuario"
)
def list_audios(
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    return db.query(Audio).filter(Audio.user_id == current_user.id).all()

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\api\routers\auth.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\api\routers\auth.py
# auth.py
# backend/app/api/routers/auth.py

from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.orm import Session

from app.api.dependencies import get_db
from app.models import User, Audio, Alert, Emotion, Role

from app.schemas.auth import Token
from app.schemas.user import UserCreate
from app.core.security import (
    get_password_hash, verify_password,
    create_access_token, get_current_user  # ‚úÖ Importaci√≥n corregida
)

router = APIRouter()

@router.post("/signup", status_code=status.HTTP_201_CREATED)
def signup(user: UserCreate, db: Session = Depends(get_db)):
    if db.query(User).filter(User.email == user.email).first():
        raise HTTPException(400, "Email registrado")
    hashed = get_password_hash(user.password)
    new = User(email=user.email, hashed_password=hashed)
    db.add(new); db.commit(); db.refresh(new)
    return {"message": "Usuario creado"}

@router.post("/login", response_model=Token)
def login(form_data: OAuth2PasswordRequestForm = Depends(),
          db: Session = Depends(get_db)):
    user = db.query(User).filter(User.email == form_data.username).first()
    if not user or not verify_password(form_data.password, user.hashed_password):
        raise HTTPException(401, "Credenciales inv√°lidas")
    token = create_access_token({"sub": str(user.id)})
    return {"access_token": token, "token_type": "bearer"}

@router.post("/refresh", response_model=Token)
def refresh_token(user: User = Depends(get_current_user)):
    new_token = create_access_token({"sub": str(user.id)})
    return {"access_token": new_token, "token_type": "bearer"}

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\api\routers\users.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session

from app.api.dependencies import get_db
from app.models import User, Audio, Alert, Emotion, Role
from app.schemas.user import UserCreate, UserRead
from app.core.security import get_password_hash

router = APIRouter()

@router.post("/", response_model=UserRead, status_code=status.HTTP_201_CREATED)
def create_user(user_in: UserCreate, db: Session = Depends(get_db)):
    db_user = db.query(User).filter(User.email == user_in.email).first()
    if db_user:
        raise HTTPException(status_code=400, detail="Email already registered")
    new_user = User(
        email=user_in.email,
        hashed_password=get_password_hash(user_in.password)
    )
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    return new_user

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\core\config.py
# backend/app/core/config.py

from typing import List, Union
from pydantic import BaseSettings, Field, validator


class Settings(BaseSettings):
    """
    Configuraci√≥n central de la aplicaci√≥n, cargada desde .env.
    """

    # Seguridad y JWT
    SECRET_KEY: str = Field(..., env="SECRET_KEY")
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60

    # URL de la base de datos: un √∫nico par√°metro para SQLite, Postgres, MySQL, etc.
    DATABASE_URL: str = "sqlite:///./app.db"

    # Modelo de Hugging Face para an√°lisis de voz
    HUGGINGFACE_MODEL: str = "CAiRE/SER-wav2vec2-large-xlsr-53-eng-zho-elderly"

    # Ruta local de almacenamiento de audios
    STORAGE_PATH: str = "./sonido/audios"

    # Umbral m√≠nimo para alertas
    ALERT_THRESHOLD: float = Field(0.1, env="ALERT_THRESHOLD")

    # Or√≠genes permitidos para CORS (puede venir como CSV en .env)
    CORS_ORIGINS: Union[str, List[str]] = Field(
        default_factory=lambda: ["http://localhost:3000"]
    )

    # Configuraci√≥n de logging
    LOG_LEVEL: str = "INFO"
    LOG_FORMAT: str = "[{time:YYYY-MM-DD HH:mm:ss}] {level} | {message}"

    # Metadatos de la API
    PROJECT_NAME: str = "Emotion Elderly API"
    VERSION: str = "0.1.0"

    @validator("CORS_ORIGINS", pre=True)
    def split_cors_origins(cls, v: Union[str, List[str]]) -> List[str]:
        """
        Permite definir CORS_ORIGINS en .env como un CSV
        y lo convierte a lista de cadenas.
        """
        if isinstance(v, str):
            return [origin.strip() for origin in v.split(",") if origin.strip()]
        return v

    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"


# Instancia global de configuraci√≥n
settings = Settings()

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\core\logger.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\core\logger.py
# logger.py
from loguru import logger
import sys
from app.core.config import settings

def configure_logging():
    logger.remove()
    logger.add(
        sys.stdout,
        level=settings.LOG_LEVEL,
        format=settings.LOG_FORMAT,
        enqueue=True,
        backtrace=True,
        diagnose=True,
    )

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\core\metrics.py
#backend/app/core/metrics.py
from prometheus_client import make_asgi_app, Counter, Histogram
from fastapi import Request, Response

REQUEST_COUNT = Counter(
    "api_request_count",
    "N√∫mero de peticiones recibidas",
    ["method", "endpoint", "http_status"],
)
REQUEST_LATENCY = Histogram(
    "api_request_latency_seconds",
    "Latencia de petici√≥n",
    ["method", "endpoint"],
)

def get_metrics_app():
    return make_asgi_app()

async def metrics_middleware(request: Request, call_next):
    method = request.method
    endpoint = request.url.path
    with REQUEST_LATENCY.labels(method, endpoint).time():
        response: Response = await call_next(request)
    REQUEST_COUNT.labels(method, endpoint, response.status_code).inc()
    return response

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\core\security.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\core\security.py
# security.py
# app/core/security.py
# backend/app/core/security.py

from datetime import datetime, timedelta
from typing import Any, Union

from fastapi import Depends, HTTPException, Request, status
from jose import JWTError, jwt
from passlib.context import CryptContext
from sqlalchemy.orm import Session

from app.database import get_db
from app.models import User
from app.core.config import settings

# -------------------
# Password hashing
# -------------------

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)

# -------------------
# JWT token handling
# -------------------

def create_access_token(
    data: dict[str, Any],
    expires_delta: Union[timedelta, None] = None
) -> str:
    to_encode = data.copy()
    expire = datetime.utcnow() + (
        expires_delta or timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    )
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(
        to_encode,
        settings.SECRET_KEY,
        algorithm=settings.ALGORITHM,
    )
    return encoded_jwt

# -------------------
# Dependencies
# -------------------

def get_current_user(
    request: Request,
    db: Session = Depends(get_db),
) -> User:
    token = request.cookies.get("access_token")

    # üîç Si no est√° en cookies, buscar en Authorization header
    if not token:
        auth_header = request.headers.get("Authorization")
        if auth_header and auth_header.startswith("Bearer "):
            token = auth_header.split(" ")[1]

    if not token:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED)

    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        user_id: str | None = payload.get("sub")
        if user_id is None:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED)
    except JWTError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED)

    user = db.get(User, int(user_id))
    if not user:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED)
    return user


def get_current_user_optional(
    request: Request,
    db: Session = Depends(get_db),
) -> User | None:
    try:
        return get_current_user(request, db)
    except HTTPException:
        return None

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\core\__init__.py

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\db\base.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\db\base.py
# base.py
from sqlalchemy.orm import declarative_base

Base = declarative_base()

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\db\session.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\db\session.py
# session.py
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from app.core.config import settings

# El engine lee la URL desde settings (cad str)
engine = create_engine(settings.DATABASE_URL, connect_args={"check_same_thread": False})

# Cada petici√≥n obtiene su propia sesi√≥n
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\models\alert.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\models\alert.py
# alert.py
from datetime import datetime
from sqlalchemy import Column, Integer, ForeignKey, String, DateTime
from sqlalchemy.orm import relationship
from app.db.base import Base

class Alert(Base):
    __tablename__ = "alerts"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    emotion_id = Column(Integer, ForeignKey("emotions.id"), nullable=False)
    message = Column(String(255), nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)

    # Relaciones
    user = relationship("User", back_populates="alerts")
    emotion = relationship("Emotion", back_populates="alerts")

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\models\audio.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\models\audio.py
# audio.py
from datetime import datetime
from sqlalchemy import Column, Integer, ForeignKey, String, DateTime
from sqlalchemy.orm import relationship
from app.db.base import Base

class Audio(Base):
    __tablename__ = "audios"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    file_path = Column(String, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)

    # Relaciones
    user = relationship("User", back_populates="audios")
    emotions = relationship("Emotion", back_populates="audio", cascade="all, delete-orphan")

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\models\emotion.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\models\emotion.py
# emotion.py
from datetime import datetime
from sqlalchemy import Column, Integer, ForeignKey, String, Float, DateTime
from sqlalchemy.orm import relationship
from app.db.base import Base

class Emotion(Base):
    __tablename__ = "emotions"

    id = Column(Integer, primary_key=True, index=True)
    audio_id = Column(Integer, ForeignKey("audios.id"), nullable=False)
    label = Column(String(50), nullable=False)
    confidence = Column(Float, nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow)

    # Relaciones
    audio = relationship("Audio", back_populates="emotions")
    alerts = relationship("Alert", back_populates="emotion", cascade="all, delete-orphan")

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\models\role.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\models\role.py
# role.py
from sqlalchemy import Column, Integer, String
from app.db.base import Base

class Role(Base):
    __tablename__ = "roles"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(50), unique=True, nullable=False)
    description = Column(String(255), nullable=True)

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\models\user.py
# backend/app/models/user.py

from sqlalchemy import Column, Integer, String, Boolean
from sqlalchemy.orm import relationship
from app.db.base import Base

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, index=True, nullable=False)
    hashed_password = Column(String, nullable=False)
    is_active = Column(Boolean, default=True)

    # Relaciones
    audios = relationship(
        "Audio",
        back_populates="user",
        cascade="all, delete-orphan"
    )
    alerts = relationship(
        "Alert",
        back_populates="user",
        cascade="all, delete-orphan"
    )

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\models\__init__.py
# app/models/__init__.py

from app.models.user import User
from app.models.audio import Audio
from app.models.emotion import Emotion
from app.models.alert import Alert
from app.models.role import Role

__all__ = ["User", "Audio", "Emotion", "Alert", "Role"]

# app/models/__init__.py
----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\schemas\alert.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\schemas\alert.py
# alert.py
from pydantic import BaseModel
from datetime import datetime
from typing import List

from app.schemas.emotion import EmotionRead

class AlertRead(BaseModel):
    id: int
    user_id: int
    emotion: EmotionRead
    message: str
    created_at: datetime

    class Config:
        orm_mode = True

class AlertList(BaseModel):
    alerts: List[AlertRead]

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\schemas\audio.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\schemas\audio.py
# audio.py
from pydantic import BaseModel
from datetime import datetime

class AudioRead(BaseModel):
    id: int
    file_path: str
    created_at: datetime

    class Config:
        orm_mode = True

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\schemas\auth.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\schemas\auth.py
# auth.py
from pydantic import BaseModel

class Token(BaseModel):
    access_token: str
    token_type: str

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\schemas\emotion.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\schemas\emotion.py
# emotion.py
from pydantic import BaseModel, Field
from datetime import datetime
from typing import List

class EmotionRead(BaseModel):
    id: int
    audio_id: int
    label: str
    confidence: float
    timestamp: datetime

    class Config:
        orm_mode = True

class AnalysisResult(BaseModel):
    audio_id: int
    emotions: List[EmotionRead]
    # Forward‚Äêref: no import directo de AlertRead aqu√≠
    alerts: List["AlertRead"] = Field(default_factory=list)

    class Config:
        orm_mode = True

# Import tard√≠o de AlertRead para resolver la forward‚Äêref
from app.schemas.alert import AlertRead

# Ahora s√≠ la resolvemos
AnalysisResult.update_forward_refs()

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\schemas\user.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\schemas\user.py
# user.py
from pydantic import BaseModel, EmailStr

class UserCreate(BaseModel):
    email: EmailStr
    password: str

class UserRead(BaseModel):
    id: int
    email: EmailStr
    is_active: bool

    class Config:
        orm_mode = True

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\services\audio_processing.py
# backend/app/services/audio_processing.py
import logging
from typing import List, Dict

from app.services.emotion_recognition import recognize_emotions
from app.db.session import SessionLocal
from app.models import Emotion, Alert
from app.core.config import settings

logger = logging.getLogger(__name__)

def process_audio(
    audio_id: int,
    file_path: str,
    user_id: int
):
    """
    Tarea en background:
      1) Ejecuta recognize_emotions().
      2) Persiste emociones.
      3) Genera alertas si confidence >= ALERT_THRESHOLD.
    """
    db = SessionLocal()
    try:
        logger.info(f"‚ñ∂Ô∏è Procesando audio #{audio_id} en background")

        results: List[Dict] = recognize_emotions(file_path)

        if not results:
            logger.warning(f"‚ö†Ô∏è No se detectaron emociones en audio #{audio_id}")
            return

        with db.begin():  # ‚úÖ agrupa transacciones
            for r in results:
                try:
                    emo = Emotion(
                        audio_id=audio_id,
                        label=r["label"],
                        confidence=r["score"]
                    )
                    db.add(emo)
                    db.flush()  # ‚úÖ obtiene emo.id sin commit

                    if r["score"] >= settings.ALERT_THRESHOLD:
                        msg = f"Detected {r['label']} ({r['score']:.2f})"
                        al = Alert(
                            user_id=user_id,
                            emotion_id=emo.id,
                            message=msg
                        )
                        db.add(al)
                        logger.info(f"üö® Alerta para audio {audio_id}: {msg}")

                except Exception as e:
                    logger.error(f"‚ùå Error procesando emoci√≥n {r}: {e}")

        logger.info(f"‚úÖ Procesamiento completo para audio #{audio_id}")

    except Exception as e:
        logger.exception(f"‚ùå Error general procesando audio #{audio_id}: {e}")
    finally:
        db.close()

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\services\audio_service.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\services\audio_service.py
# audio_service.py
----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\services\emotion_recognition.py
# emotion_recognition.py
# backend/app/services/emotion_recognition.py

from typing import List, Dict
from transformers import pipeline
from app.core.config import settings
from pathlib import Path
import soundfile as sf
import numpy as np
import logging

logger = logging.getLogger(__name__)

# Diccionario de mapeo de etiquetas
label_map = {
    "LABEL_0": "Alegr√≠a",
    "LABEL_1": "Tristeza",
    "LABEL_2": "Miedo",
    "LABEL_3": "Enojo",
    "LABEL_4": "Desagrado",
    "LABEL_5": "Sorpresa",
    "LABEL_6": "Confusi√≥n",
    "LABEL_7": "Calma",
    "LABEL_8": "Ansiedad",
    "LABEL_9": "Tristeza",
    "LABEL_10": "Alegr√≠a",
    "LABEL_11": "Miedo",
    "LABEL_12": "Enojo",
}

# Cargamos el pipeline una sola vez
try:
    emotion_pipeline = pipeline(
        "audio-classification",
        model=settings.HUGGINGFACE_MODEL,
        top_k=5
    )
except Exception as e:
    logger.error(f"‚ùå Error cargando modelo HuggingFace: {e}")
    emotion_pipeline = None


def recognize_emotions(file_path: str) -> List[Dict]:
    """
    Ejecuta el modelo de SER sobre el archivo de audio,
    asegurando que la se√±al sea mono.
    Devuelve una lista de emociones sin duplicados, 
    cada una con su score m√°ximo, ordenadas descendentemente.
    """
    if emotion_pipeline is None:
        raise RuntimeError("Pipeline no inicializado")

    p = Path(file_path).expanduser().resolve()
    if not p.exists():
        raise FileNotFoundError(f"Audio no encontrado: {p}")

    # Leer se√±al de audio
    data, sr = sf.read(str(p))
    if data.size == 0:
        raise ValueError(f"‚ö†Ô∏è Audio vac√≠o: {p}")

    # Convertir a mono si es necesario
    if data.ndim > 1:
        data = np.mean(data, axis=1)

    # Normalizar se√±al
    data = data / np.max(np.abs(data)) if np.max(np.abs(data)) > 0 else data

    # Clasificaci√≥n cruda
    try:
        raw_results = emotion_pipeline(data, sampling_rate=sr)
        logger.info(f"üîç Resultados del modelo para {p.name}: {raw_results}")
    except Exception as e:
        logger.error(f"‚ùå Error en clasificaci√≥n de audio {p.name}: {e}")
        return []

    # Mapear labels legibles
    mapped = [
        {
            "label": label_map.get(r["label"], r["label"]),
            "score": r["score"]
        }
        for r in raw_results
    ]

    # Agrupar por etiqueta y conservar el score m√°ximo
    unique_scores: Dict[str, float] = {}
    for item in mapped:
        lbl, scr = item["label"], item["score"]
        if lbl not in unique_scores or scr > unique_scores[lbl]:
            unique_scores[lbl] = scr

    # Reconstruir lista deduplicada, ordenada por score descendente
    deduped = [
        {"label": lbl, "score": unique_scores[lbl]}
        for lbl in sorted(unique_scores, key=lambda l: unique_scores[l], reverse=True)
    ]

    return deduped

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\services\__init__.py

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\templates\index.html
<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Emotion Elderly App</title>
  </head>
  <body>
    <h1>Bienvenido a Emotion Elderly App</h1>
    <p>Usuario: {{ user.username if user else "Invitado" }}</p>
  </body>
</html>

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\utils\date_utils.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\utils\date_utils.py
# date_utils.py

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\utils\file.py
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\app\utils\file.py
# file.py

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\test\test_auth.py
#C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\backend\test\test_auth.py
# test_auth.py
# backend/tests/test_auth.py

import pytest
from fastapi.testclient import TestClient
from app.main import app
from app.db.session import SessionLocal
from app.models.user import User
from app.core.security import get_password_hash, create_access_token

client = TestClient(app)

@pytest.fixture(scope="module")
def test_user():
    db = SessionLocal()
    email = "test@example.com"
    password = "test123"
    hashed = get_password_hash(password)
    user = User(email=email, hashed_password=hashed, is_active=True)
    db.add(user)
    db.commit()
    db.refresh(user)
    yield {"email": email, "password": password, "id": user.id}
    db.delete(user)
    db.commit()
    db.close()

def test_login_success(test_user):
    response = client.post("/auth/login", data={
        "username": test_user["email"],
        "password": test_user["password"]
    })
    assert response.status_code == 200
    assert "access_token" in response.json()

def test_login_fail():
    response = client.post("/auth/login", data={
        "username": "wrong@example.com",
        "password": "wrongpass"
    })
    assert response.status_code == 401

def test_protected_route_without_token():
    response = client.get("/audios")
    assert response.status_code == 401

def test_protected_route_with_token(test_user):
    token = create_access_token({"sub": str(test_user["id"])})
    headers = {"Authorization": f"Bearer {token}"}
    response = client.get("/audios", headers=headers)
    assert response.status_code == 200

def test_refresh_token(test_user):
    token = create_access_token({"sub": str(test_user["id"])})
    headers = {"Authorization": f"Bearer {token}"}
    response = client.post("/auth/refresh", headers=headers)
    assert response.status_code == 200
    assert "access_token" in response.json()


----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\.env
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\.env.example
# .env.example

VITE_API_URL=http://localhost:8000


----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\.env.example
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\.env.example
# .env.example

VITE_API_URL=http://localhost:8000


----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\.gitignore
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\eslint.config.js
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\tsconfig.app.json
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting y seguridad */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,
    "erasableSyntaxOnly": true,

    /* Compatibilidad */
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "skipLibCheck": true
  },
  "include": ["src"]
}

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\tsconfig.json
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\tsconfig.node.json
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting y seguridad */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,
    "erasableSyntaxOnly": true,

    /* Compatibilidad */
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "skipLibCheck": true
  },
  "include": ["vite.config.ts"]
}

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\vite.config.ts
// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  plugins: [react()],

  // Preempaqueta jwt-decode como ESM para que exponga default()
  optimizeDeps: {
    include: ["jwt-decode"],
  },

  resolve: {
    alias: {
      "@": "/src",
    },
  },

  server: {
    host: true,
    port: 5173,
    open: true,
  },
});

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\public\index.html
<!-- # C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\public\index.html
# index.html -->

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" href="/favicon.ico" />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap"
      rel="stylesheet"
    />
    <title>Emotion Elderly</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\App.tsx
//C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\App.tsx
// frontend/src/App.tsx

import React from "react";
import { Routes, Route, Navigate } from "react-router-dom";

import Login from "./pages/Login";
import Auth from "./pages/Auth";
import Loading from "./pages/Loading";

import Dashboard from "./pages/Dashboard";
import AudioHistory from "./pages/AudioHistory";
import Alerts from "./pages/Alerts";
import Analyze from "./pages/Analyze";
import UploadAudio from "./pages/UploadAudio";
import UploadMultipleAudios from "./pages/UploadMultipleAudios"; // ‚úÖ nuevo componente

import PrivateRoute from "./components/PrivateRoute";
import Layout from "./components/layout/Layout";

const App: React.FC = () => (
  <Routes>
    {/* üåê Rutas p√∫blicas */}
    <Route path="/" element={<Navigate to="/login" replace />} />
    <Route path="/login" element={<Login />} />
    <Route path="/signup" element={<Auth mode="signup" />} />
    <Route path="/loading" element={<Loading />} />

    {/* üîê Rutas privadas */}
    <Route element={<PrivateRoute />}>
      <Route element={<Layout />}>
        <Route path="/dashboard" element={<Dashboard />} />
        <Route path="/audios" element={<AudioHistory />} />
        <Route path="/alerts" element={<Alerts />} />
        <Route path="/analyze" element={<Analyze />} />
        <Route path="/analyze/:audioId" element={<Analyze />} />
        <Route path="/upload" element={<UploadAudio />} />
        <Route
          path="/upload-multiple"
          element={<UploadMultipleAudios />}
        />{" "}
        {/* ‚úÖ nueva ruta */}
      </Route>
    </Route>

    {/* üß≠ Catch-all */}
    <Route path="*" element={<Navigate to="/login" replace />} />
  </Routes>
);

export default App;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\index.tsx
// # C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\index.tsx
// # index.tsx
// src/index.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { AuthProvider } from "./contexts/AuthContext";
import "./index.css"; // tus estilos globales

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);
root.render(
  <React.StrictMode>
    <AuthProvider>
      <App />
    </AuthProvider>
  </React.StrictMode>
);

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\main.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { BrowserRouter } from "react-router-dom";
import { AuthProvider } from "./contexts/AuthContext";
import ErrorBoundary from "./components/ErrorBoundary";

// ‚úÖ Importa los estilos de Bootstrap
import "bootstrap/dist/css/bootstrap.min.css";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <ErrorBoundary>
      <BrowserRouter>
        <AuthProvider>
          <App />
        </AuthProvider>
      </BrowserRouter>
    </ErrorBoundary>
  </React.StrictMode>
);

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\vite-env.d.ts
/// <reference types="vite/client" />

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\api\axios.ts
// C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\api\axios.ts
// frontend/src/api/axios.ts

import axios from "axios";

// Crear instancia de Axios con configuraci√≥n base
const api = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL || "http://localhost:8000",
  headers: {
    "Content-Type": "multipart/form-data",
  },
});

// A√±adir token si existe
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("access_token");
    if (token && config.headers) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Manejo de errores globales
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // Si el error es 401 y no es un intento de refresh
    if (
      error.response?.status === 401 &&
      !originalRequest._retry &&
      !originalRequest.url.includes("/auth/refresh")
    ) {
      originalRequest._retry = true;

      try {
        // Intentar refrescar el token
        const res = await api.post("/auth/refresh");
        const newToken = res.data.access_token;

        // Guardar nuevo token y reintentar la petici√≥n original
        localStorage.setItem("access_token", newToken);
        originalRequest.headers.Authorization = `Bearer ${newToken}`;
        return api(originalRequest);
      } catch (refreshError) {
        // Si falla el refresh, limpiar y redirigir
        localStorage.removeItem("access_token");
        alert("‚ö†Ô∏è Tu sesi√≥n ha expirado. Por favor inicia sesi√≥n nuevamente.");
        window.location.href = "/login";
        return Promise.reject(refreshError);
      }
    }

    return Promise.reject(error);
  }
);

export default api;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\assets\.gitkeep
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\assets\.gitkeep
# .gitkeep

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\EmotionChart.tsx
// frontend/src/components/EmotionChart.tsx
// frontend/src/components/EmotionChart.tsx
import React from "react";
import { Bar } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Tooltip,
  Legend,
} from "chart.js";
import ChartDataLabels from "chartjs-plugin-datalabels";

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Tooltip,
  Legend,
  ChartDataLabels
);

type Emotion = {
  label: string;
  confidence: number;
};

const emotionColors: Record<string, string> = {
  Tristeza: "#5DADE2",
  Alegr√≠a: "#FFD700",
  Miedo: "#4B0082",
  Enojo: "#E63946",
  Desagrado: "#9ACD32",
  Sorpresa: "#FFA500",
  Neutral: "#95A5A6",
  Confianza: "#008080",
  Verg√ºenza: "#8E44AD",
  Culpa: "#8B4513",
  Amor: "#E91E63",
  Orgullo: "#FFB400",
  Inter√©s: "#1ABC9C",
  Calma: "#AED6F1",
  Confusi√≥n: "#7F8C8D",
  Ansiedad: "#34495E",
};

type Props = {
  emotions: Emotion[];
  audioId: number;
};

const EmotionChart: React.FC<Props> = ({ emotions, audioId }) => {
  if (!emotions.length) {
    return <p>‚ö†Ô∏è No se detectaron emociones en este audio.</p>;
  }

  const valid = emotions.filter(
    (e) => typeof e.label === "string" && typeof e.confidence === "number"
  );
  if (!valid.length) {
    return <p>‚ö†Ô∏è Los datos de emociones est√°n incompletos o corruptos.</p>;
  }

  const data = {
    labels: valid.map((e) => e.label),
    datasets: [
      {
        label: "Confianza (%)",
        data: valid.map((e) => e.confidence * 100),
        backgroundColor: valid.map((e) => emotionColors[e.label] || "#ccc"),
        datalabels: {
          anchor: "end",
          align: "top",
          formatter: (v: number) => `${v.toFixed(1)}%`,
          color: "#333",
          font: { weight: "bold" },
        },
      },
    ],
  };

  const options = {
    plugins: { legend: { display: false }, datalabels: { display: true } },
    scales: {
      y: {
        beginAtZero: true,
        max: 100,
        ticks: { callback: (v: number) => `${v}%` },
      },
    },
    responsive: true,
    maintainAspectRatio: false,
  };

  // üéØ Emociones √∫nicas detectadas en este an√°lisis
  const detectedLabels = new Set(valid.map((e) => e.label));

  return (
    <section>
      <h2>üé≠ Emociones detectadas en el audio #{audioId}</h2>

      <div
        style={{
          display: "flex",
          alignItems: "flex-start",
          gap: "2rem",
          marginTop: "1rem",
        }}
      >
        {/* Gr√°fico a la izquierda */}
        <div style={{ flex: 1, minWidth: "300px", height: "300px" }}>
          <Bar data={data} options={options} />
        </div>

        {/* Leyenda solo de emociones detectadas */}
        <aside style={{ minWidth: "160px" }}>
          <h3>üé® Leyenda</h3>
          <ul style={{ listStyle: "none", padding: 0 }}>
            {[...detectedLabels].map((label) => (
              <li
                key={label}
                style={{
                  display: "flex",
                  alignItems: "center",
                  marginBottom: "4px",
                }}
              >
                <span
                  style={{
                    display: "inline-block",
                    width: 16,
                    height: 16,
                    backgroundColor: emotionColors[label] || "#ccc",
                    borderRadius: 4,
                    marginRight: 8,
                  }}
                />
                {label}
              </li>
            ))}
          </ul>
        </aside>
      </div>
    </section>
  );
};

export default EmotionChart;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\SummaryCharts.tsx
//C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\SummaryCharts.tsx

import React, { useEffect, useState } from "react";
import { Bar, Pie } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  ArcElement,
  Tooltip,
  Legend,
} from "chart.js";
import api from "../api/axios";

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  ArcElement,
  Tooltip,
  Legend
);

// Pesos para calcular criticidad
const WEIGHTS: Record<string, number> = {
  Confusi√≥n: 3,
  Miedo: 3,
  Tristeza: 3,
  Enojo: 2,
  Alegr√≠a: 1,
  Serenidad: 1,
};

const SummaryCharts: React.FC = () => {
  const [labels, setLabels] = useState<string[]>([]);
  const [freqData, setFreqData] = useState<number[]>([]);
  const [critPerc, setCritPerc] = useState<number[]>([]);

  useEffect(() => {
    (async () => {
      try {
        const res = await api.get("/analyze/results/all");
        const allEmotions = res.data.flatMap((r: any) =>
          r.emotions.map((e: any) => e.label)
        );

        // Frecuencia
        const freqMap: Record<string, number> = {};
        allEmotions.forEach((lab: string) => {
          freqMap[lab] = (freqMap[lab] || 0) + 1;
        });
        const emotionLabels = Object.keys(freqMap);

        // Criticidad
        const impacts = emotionLabels.map(
          (lab) => (freqMap[lab] || 0) * (WEIGHTS[lab] || 1)
        );
        const totalImpact = impacts.reduce((a, b) => a + b, 0);
        const critPercents = impacts.map((imp) =>
          totalImpact ? parseFloat(((imp / totalImpact) * 100).toFixed(2)) : 0
        );

        setLabels(emotionLabels);
        setFreqData(emotionLabels.map((lab) => freqMap[lab]));
        setCritPerc(critPercents);
      } catch (error) {
        console.error("Error al cargar los datos:", error);
      }
    })();
  }, []);

  // üéØ Gr√°fico de barras con frecuencia y criticidad
  const barData = {
    labels,
    datasets: [
      {
        label: "Frecuencia",
        data: freqData,
        backgroundColor: "rgba(90, 93, 255, 0.7)",
      },
      {
        label: "Criticidad (%)",
        data: critPerc,
        backgroundColor: "rgba(255, 183, 3, 0.7)",
      },
    ],
  };

  // ü•ß Gr√°fico circular de criticidad
  const pieData = {
    labels,
    datasets: [
      {
        data: critPerc,
        backgroundColor: [
          "#E63946",
          "#F4A261",
          "#2A9D8F",
          "#E9C46A",
          "#457B9D",
          "#1D3557",
          "#A8DADC",
          "#FFB703",
        ].slice(0, labels.length),
      },
    ],
  };

  return (
    <section>
      <h2>üìä Resumen Global de Emociones</h2>
      <div style={{ display: "flex", gap: "2rem", flexWrap: "wrap" }}>
        <div style={{ flex: 1, minWidth: 300, height: 300 }}>
          <Bar
            data={barData}
            options={{
              responsive: true,
              plugins: {
                legend: {
                  position: "top",
                },
              },
            }}
          />
        </div>
        <div style={{ flex: 1, minWidth: 300, height: 300 }}>
          <Pie
            data={pieData}
            options={{
              responsive: true,
              plugins: {
                legend: {
                  position: "right",
                },
              },
            }}
          />
        </div>
      </div>
    </section>
  );
};

export default SummaryCharts;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\ErrorBoundary.tsx
import React from "react";

type Props = {
  children: React.ReactNode;
};

type State = {
  hasError: boolean;
};

class ErrorBoundary extends React.Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(_: Error): State {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error("üõë Error capturado por ErrorBoundary:", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <main style={{ padding: "2rem", textAlign: "center" }}>
          <h1>üò¢ Algo sali√≥ mal</h1>
          <p>Intenta recargar la p√°gina o volver m√°s tarde.</p>
        </main>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\PrivateRoute.tsx
// src/components/PrivateRoute.tsx
import { Navigate, Outlet } from "react-router-dom";

const PrivateRoute = () => {
  const token = localStorage.getItem("access_token");

  // Puedes agregar l√≥gica adicional si el token debe ser validado
  return token ? <Outlet /> : <Navigate to="/login" replace />;
};

export default PrivateRoute;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\common\.gitkeep
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\common\.gitkeep
# .gitkeep

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\Dashboard\EmotionDistributionChart.tsx
//frontend/src/components/Dashboard/EmotionDistributionChart.tsx
import React, { useEffect, useState } from "react";
import { Bar, Pie, Doughnut, Radar } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  PointElement,
  LineElement,
  RadialLinearScale,
  ArcElement,
  Tooltip,
  Legend,
} from "chart.js";
import api from "../../api/axios";

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  PointElement,
  LineElement,
  RadialLinearScale,
  ArcElement,
  Tooltip,
  Legend
);

// Pesos para calcular criticidad
const WEIGHTS: Record<string, number> = {
  Confusi√≥n: 3,
  Miedo: 3,
  Tristeza: 3,
  Enojo: 2,
  Alegr√≠a: 1,
  Serenidad: 1,
};

// Colores base para emociones
const emotionColors: string[] = [
  "#E63946",
  "#F4A261",
  "#2A9D8F",
  "#E9C46A",
  "#457B9D",
  "#1D3557",
  "#A8DADC",
  "#FFB703",
  "#5DADE2",
  "#8E44AD",
  "#34495E",
  "#E91E63",
];

const EmotionDistributionChart: React.FC = () => {
  const [labels, setLabels] = useState<string[]>([]);
  const [critPerc, setCritPerc] = useState<number[]>([]);
  const [chartType, setChartType] = useState<
    "bar" | "pie" | "doughnut" | "radar"
  >("radar");

  useEffect(() => {
    const fetchData = async () => {
      try {
        const res = await api.get("/analyze/results/all");
        const allEmotions = res.data.flatMap((r: any) =>
          r.emotions.map((e: any) => e.label)
        );

        // Frecuencia
        const freqMap: Record<string, number> = {};
        allEmotions.forEach((lab: string) => {
          freqMap[lab] = (freqMap[lab] || 0) + 1;
        });
        const emotionLabels = Object.keys(freqMap);

        // Criticidad
        const impacts = emotionLabels.map(
          (lab) => (freqMap[lab] || 0) * (WEIGHTS[lab] || 1)
        );
        const totalImpact = impacts.reduce((a, b) => a + b, 0);
        const critPercents = impacts.map((imp) =>
          totalImpact ? parseFloat(((imp / totalImpact) * 100).toFixed(2)) : 0
        );

        setLabels(emotionLabels);
        setCritPerc(critPercents);
      } catch (err) {
        console.error("Error al obtener emociones:", err);
      }
    };

    fetchData();
  }, []);

  const data = {
    labels,
    datasets: [
      {
        label: "Criticidad (%)",
        data: critPerc,
        backgroundColor:
          chartType === "radar"
            ? "rgba(255, 183, 3, 0.3)"
            : emotionColors.slice(0, labels.length),
        borderColor: chartType === "radar" ? "rgba(255, 183, 3, 0.8)" : "#fff",
        pointBackgroundColor: "rgba(255, 183, 3, 1)",
        pointBorderColor: "#fff",
        pointHoverBackgroundColor: "#fff",
        pointHoverBorderColor: "rgba(255, 183, 3, 1)",
        borderWidth: 2,
        tension: 0.4,
      },
    ],
  };

  const options = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: chartType !== "bar",
        position: "top",
        labels: {
          color: "#333",
          font: {
            size: 14,
          },
        },
      },
      tooltip: {
        callbacks: {
          label: (ctx: any) => `${ctx.parsed || ctx.raw}%`,
        },
      },
    },
    scales:
      chartType === "radar"
        ? {
            r: {
              beginAtZero: true,
              max: 100,
              ticks: {
                callback: (value: number) => `${value}%`,
                stepSize: 20,
                color: "#666",
                font: {
                  size: 12,
                },
              },
              grid: {
                color: "rgba(0,0,0,0.1)",
              },
              angleLines: {
                color: "rgba(0,0,0,0.2)",
              },
              pointLabels: {
                color: "#444",
                font: {
                  size: 13,
                  weight: "bold",
                },
              },
            },
          }
        : chartType === "bar"
        ? {
            y: {
              beginAtZero: true,
              title: { display: true, text: "Criticidad (%)" },
            },
            x: {
              title: { display: true, text: "Emociones" },
            },
          }
        : undefined,
  };

  const renderChart = () => {
    const chartStyle = {
      height: "400px",
      width: "100%",
      maxWidth: "700px",
      margin: "0 auto",
    };

    switch (chartType) {
      case "pie":
        return (
          <div style={chartStyle}>
            <Pie data={data} options={options} />
          </div>
        );
      case "doughnut":
        return (
          <div style={chartStyle}>
            <Doughnut data={data} options={options} />
          </div>
        );
      case "radar":
        return (
          <div style={chartStyle}>
            <Radar data={data} options={options} />
          </div>
        );
      default:
        return (
          <div style={chartStyle}>
            <Bar data={data} options={options} />
          </div>
        );
    }
  };

  return (
    <div style={{ textAlign: "center", padding: "2rem" }}>
      <h4>üìä Distribuci√≥n de criticidad emocional</h4>
      <div style={{ marginBottom: "1rem" }}>
        <button onClick={() => setChartType("bar")}>Gr√°fico de Barras</button>
        <button onClick={() => setChartType("pie")}>Gr√°fico de Pie</button>
        <button onClick={() => setChartType("doughnut")}>
          Gr√°fico Doughnut
        </button>
        <button onClick={() => setChartType("radar")}>Gr√°fico Radar</button>
      </div>
      {renderChart()}
    </div>
  );
};

export default EmotionDistributionChart;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\layout\.gitkeep
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\layout\.gitkeep
# .gitkeep

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\layout\Footer.tsx
// src/components/layout/Footer.tsx
import React from "react";

const Footer: React.FC = () => (
  <footer
    style={{
      textAlign: "center",
      padding: "1rem 0",
      borderTop: "1px solid #eaeaea",
      marginTop: "2rem",
    }}
  >
    <small>¬© {new Date().getFullYear()} Emotion Elderly</small>
  </footer>
);

export default Footer;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\layout\Layout.tsx
import React from "react";
import Navbar from "./Navbar";
import { Outlet } from "react-router-dom";

const Layout: React.FC = () => {
  return (
    <>
      <Navbar />
      <main style={{ padding: "1rem" }}>
        <Outlet />
      </main>
    </>
  );
};

export default Layout;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\layout\Navbar.css
nav {
  display: flex;
  gap: 12px;
  padding: 12px;
  background-color: #5A5DFF;
  color: white;
}

nav a {
  color: white;
  text-decoration: none;
  font-weight: bold;
}

nav button {
  background-color: transparent;
  border: none;
  color: white;
  cursor: pointer;
}

nav button:hover, nav a:hover {
  text-decoration: underline;
}

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\layout\Navbar.tsx
//src/components/layout/Navbar.tsx
// üìÑ src/components/layout/Navbar.tsx

import React from "react";
import { Link, useNavigate } from "react-router-dom";
import { useAuth } from "../../contexts/AuthContext";
import "./Navbar.css";

const Navbar: React.FC = () => {
  const { isAuthenticated, user, logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate("/login"); // ‚úÖ redirige a login despu√©s de cerrar sesi√≥n
  };

  return (
    <nav>
      <Link to="/">Inicio</Link>

      {isAuthenticated ? (
        <>
          <Link to="/dashboard">Dashboard</Link>
          <Link to="/audios">Audios</Link>
          <Link to="/alerts">Alertas</Link>
          <Link to="/upload">Subir Audio</Link>
          <Link to="/upload-multiple">Subir M√∫ltiples Audios</Link>{" "}
          {/* ‚úÖ nuevo enlace */}
          {user && (
            <span style={{ marginLeft: "auto" }}>
              üë§ <strong>{user.email}</strong>
            </span>
          )}
          <button onClick={handleLogout}>Cerrar sesi√≥n</button>
        </>
      ) : (
        <>
          <Link to="/login">Login</Link>
          <Link to="/signup">Registrarse</Link>
        </>
      )}
    </nav>
  );
};

export default Navbar;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\contexts\.gitkeep
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\contexts\.gitkeep
# .gitkeep

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\contexts\AuthContext.tsx
// src/contexts/AuthContext.tsx

import React, {
  createContext,
  useState,
  useEffect,
  useContext,
  ReactNode,
} from "react";

type DecodedToken = {
  sub: string;
  exp?: number;
  iat?: number;
  // a√±ade aqu√≠ m√°s campos si tu token los incluye
};

type User = {
  id: string;
};

type AuthContextType = {
  user: User | null;
  isAuthenticated: boolean;
  login: (token: string) => void;
  logout: () => void;
};

const AuthContext = createContext<AuthContextType | undefined>(undefined);

/**
 * Decodifica sin librer√≠as externas.
 * Al separar el token en 3 partes y hacer atob sobre la segunda,
 * obtenemos el JSON del payload.
 */
function parseJwt(token: string): DecodedToken {
  try {
    const base64Url = token.split(".")[1];
    const base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
    const json = decodeURIComponent(
      atob(base64)
        .split("")
        .map((c) => "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2))
        .join("")
    );
    return JSON.parse(json);
  } catch {
    throw new Error("Invalid token format");
  }
}

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);

  const login = (token: string) => {
    localStorage.setItem("access_token", token);
    try {
      const payload = parseJwt(token);
      setUser({ id: payload.sub });
    } catch (err) {
      console.error("Error al parsear token en AuthProvider:", err);
      logout();
    }
  };

  const logout = () => {
    localStorage.removeItem("access_token");
    setUser(null);
  };

  // Al montar, comprobamos si hay token y lo parseamos
  useEffect(() => {
    const token = localStorage.getItem("access_token");
    if (token) {
      login(token);
    }
  }, []);

  return (
    <AuthContext.Provider
      value={{
        user,
        isAuthenticated: Boolean(user),
        login,
        logout,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const ctx = useContext(AuthContext);
  if (!ctx) {
    throw new Error("useAuth debe usarse dentro de AuthProvider");
  }
  return ctx;
};

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\hooks\.gitkeep
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\hooks\.gitkeep
# .gitkeep

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Alerts.tsx
// src/pages/Alerts.tsx
import React, { useState, useEffect, useCallback } from "react";
import {
  Row,
  Col,
  Button,
  Spinner,
  Alert as BSAlert,
  Card,
  Table,
} from "react-bootstrap";
import api from "../api/axios";
import type { Audio, AnalysisResult } from "../types";
import EmotionChart from "../components/EmotionChart";

const Alerts: React.FC = () => {
  const [audios, setAudios] = useState<Audio[]>([]);
  const [loadingList, setLoadingList] = useState(true);
  const [loadingAnalysis, setLoadingAnalysis] = useState(false);
  const [analysis, setAnalysis] = useState<AnalysisResult | null>(null);
  const [error, setError] = useState<string>("");
  const [selectedAudio, setSelectedAudio] = useState<number | null>(null);
  const [viewType, setViewType] = useState<"alert" | "chart">("alert");
  const [results, setResults] = useState<Record<number, AnalysisResult>>({});
  const [jobs, setJobs] = useState<Record<number, string>>({});
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 7;

  const paginatedAudios = audios.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );
  const totalPages = Math.ceil(audios.length / itemsPerPage);

  useEffect(() => {
    (async () => {
      setLoadingList(true);
      try {
        const [audiosRes, resultsRes] = await Promise.all([
          api.get<Audio[]>("/audios"),
          api.get<AnalysisResult[]>("/analyze/results/all"),
        ]);
        const analyzedIds = new Set(resultsRes.data.map((r) => r.audio_id));
        const filteredAudios = audiosRes.data.filter((a) =>
          analyzedIds.has(a.id)
        );
        setAudios(filteredAudios);

        const resultMap: Record<number, AnalysisResult> = {};
        resultsRes.data.forEach((r) => {
          resultMap[r.audio_id] = r;
        });
        setResults(resultMap);

        const jobStatuses: Record<number, string> = {};
        await Promise.all(
          filteredAudios.map(async (audio) => {
            try {
              const res = await api.get("/analyze/status/by-audio", {
                params: { audio_id: audio.id },
              });
              jobStatuses[audio.id] = res.data.status;
            } catch {
              jobStatuses[audio.id] = "unknown";
            }
          })
        );
        setJobs(jobStatuses);
      } catch (err) {
        console.error(err);
        setError("No se pudieron cargar los audios.");
      } finally {
        setLoadingList(false);
      }
    })();
  }, []);

  const fetchAnalysis = useCallback(
    async (audioId: number, mode: "alert" | "chart") => {
      setError("");
      setLoadingAnalysis(true);
      setSelectedAudio(audioId);
      setViewType(mode);
      setAnalysis(null);

      try {
        const res = await api.get<AnalysisResult>("/analyze/by-audio", {
          params: { audio_id: audioId },
        });
        setAnalysis(res.data);
      } catch (err) {
        console.error(err);
        setError("Error al obtener el an√°lisis.");
      } finally {
        setLoadingAnalysis(false);
      }
    },
    []
  );

  const renderAlertReport = () => {
    if (!analysis) return null;

    const { audio_id, emotions, alerts } = analysis;
    if (!emotions || emotions.length === 0) {
      return (
        <BSAlert variant="warning">
          ‚ö†Ô∏è No se detectaron emociones en este audio.
        </BSAlert>
      );
    }

    const top4 = [...emotions]
      .sort((a, b) => b.confidence - a.confidence)
      .slice(0, 4);

    const alto = top4.filter((e) => e.confidence >= 0.12);
    const medio = top4.filter(
      (e) => e.confidence >= 0.1 && e.confidence < 0.12
    );
    const bajo = top4.filter((e) => e.confidence >= 0.05 && e.confidence < 0.1);
    const ts = alerts?.length ? alerts[0].created_at : new Date().toISOString();

    return (
      <Card className="p-3">
        <Card.Title>Alerta para el asistente</Card.Title>
        <Card.Text>
          <strong>Audio #:</strong> {audio_id} <br />
          <strong>Detecci√≥n:</strong> {new Date(ts).toLocaleString()}
        </Card.Text>

        <h5>1. Emociones cr√≠ticas</h5>
        <ul>
          {top4.map((e) => (
            <li key={e.id}>
              {e.label}: {(e.confidence * 100).toFixed(1)}%
            </li>
          ))}
        </ul>

        <h5>2. Nivel de urgencia</h5>
        <p>
          <strong>Alto (‚â•12%):</strong>{" "}
          {alto.map((e) => e.label).join(", ") || "‚Äî"}
        </p>
        <p>
          <strong>Medio (10‚Äì12%):</strong>{" "}
          {medio.map((e) => e.label).join(", ") || "‚Äî"}
        </p>
        <p>
          <strong>Bajo (5‚Äì10%):</strong>{" "}
          {bajo.map((e) => e.label).join(", ") || "‚Äî"}
        </p>

        <p className="mt-3">
          {alto.length
            ? "‚ö†Ô∏è Acci√≥n inmediata recomendada"
            : "‚ÑπÔ∏è Monitoreo continuo"}
        </p>
      </Card>
    );
  };

  return (
    <div className="container-fluid py-4">
      <h2>üö® Alertas</h2>
      {error && <BSAlert variant="danger">{error}</BSAlert>}

      <Row>
        {/* Tabla de audios */}
        <Col md={6} className="pe-2">
          {loadingList ? (
            <Spinner animation="border" />
          ) : (
            <>
              <Table striped bordered hover responsive className="mb-3">
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Archivo</th>
                    <th>Fecha</th>
                    <th>Ver alerta</th>
                    <th>Ver gr√°fico</th>
                  </tr>
                </thead>
                <tbody>
                  {paginatedAudios.map((a) => {
                    const status = jobs[a.id];
                    const hasResult = results[a.id] !== undefined;
                    const isPending =
                      status === "pending" || status === "running";
                    const isError = status === "error";

                    return (
                      <tr
                        key={a.id}
                        className={
                          a.id === selectedAudio ? "table-primary" : ""
                        }
                      >
                        <td>{a.id}</td>
                        <td>{a.file_path}</td>
                        <td>{new Date(a.created_at).toLocaleString()}</td>
                        <td>
                          <Button
                            size="sm"
                            variant="primary"
                            onClick={() => fetchAnalysis(a.id, "alert")}
                            disabled={!hasResult || isError}
                          >
                            Ver alerta
                          </Button>
                          {isPending && (
                            <span className="ms-2 text-warning">
                              ‚è≥{" "}
                              {status === "pending" ? "En cola" : "Procesando"}
                            </span>
                          )}
                          {isError && (
                            <span className="ms-2 text-danger">
                              ‚ùå Error en an√°lisis
                            </span>
                          )}
                        </td>
                        <td>
                          <Button
                            size="sm"
                            variant="info"
                            onClick={() => fetchAnalysis(a.id, "chart")}
                            disabled={!hasResult || isError}
                          >
                            Ver gr√°fico
                          </Button>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </Table>

              {/* Paginaci√≥n */}
              <div className="d-flex justify-content-between">
                <Button
                  size="sm"
                  variant="outline-secondary"
                  disabled={currentPage === 1}
                  onClick={() => setCurrentPage((prev) => prev - 1)}
                >
                  ‚¨Ö Anterior
                </Button>
                <span>
                  P√°gina {currentPage} de {totalPages}
                </span>
                <Button
                  size="sm"
                  variant="outline-secondary"
                  disabled={currentPage === totalPages}
                  onClick={() => setCurrentPage((prev) => prev + 1)}
                >
                  Siguiente ‚û°
                </Button>
              </div>
            </>
          )}
        </Col>

        {/* An√°lisis a la derecha */}
        <Col md={6} className="ps-2">
          {loadingAnalysis && (
            <div className="text-center">
              <Spinner animation="border" />
            </div>
          )}

          {!loadingAnalysis &&
            analysis &&
            viewType === "alert" &&
            renderAlertReport()}

          {!loadingAnalysis &&
            analysis &&
            viewType === "chart" &&
            analysis.emotions.length > 0 && (
              <EmotionChart
                emotions={analysis.emotions}
                audioId={analysis.audio_id}
              />
            )}
        </Col>
      </Row>
    </div>
  );
};

export default Alerts;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Analyze copy.tsx
//C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Analyze.tsx
//Analyze.tsx
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import api from "../api/axios";
import EmotionChart from "../components/EmotionChart";
import "../styles/spinner.css";
import "../styles/progress.css";

type Emotion = {
  id: number;
  label: string;
  confidence: number;
  timestamp: string;
};

type Alert = {
  id: number;
  message: string;
  created_at: string;
};

const Analyze: React.FC = () => {
  const { audioId } = useParams();
  const [result, setResult] = useState<{
    emotions: Emotion[];
    alerts: Alert[];
  } | null>(null);
  const [status, setStatus] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(true);
  const [progress, setProgress] = useState<number>(0);

  useEffect(() => {
    setLoading(true);
    setProgress(0);

    const interval = setInterval(() => {
      setProgress((prev) => (prev < 90 ? prev + 10 : prev));
    }, 200);

    api
      .get(`/analyze/?audio_id=${audioId}`)
      .then((res) => {
        setResult({ emotions: res.data.emotions, alerts: res.data.alerts });
        setLoading(false);
        setProgress(100);
        clearInterval(interval);
      })
      .catch(() => {
        setStatus("‚ùå Error al obtener an√°lisis");
        setLoading(false);
        clearInterval(interval);
      });

    return () => clearInterval(interval);
  }, [audioId]);

  return (
    <main>
      <h1>Resultados del An√°lisis</h1>
      {status && <p>{status}</p>}

      {loading ? (
        <div style={{ textAlign: "center", marginTop: "2rem" }}>
          <div className="spinner" style={{ marginBottom: "1rem" }} />
          <div className="progress-bar">
            <div className="progress-fill" style={{ width: `${progress}%` }} />
          </div>
          <p>‚è≥ Procesando an√°lisis, por favor espera‚Ä¶</p>
        </div>
      ) : result ? (
        <>
          <EmotionChart emotions={result.emotions} audioId={Number(audioId)} />

          <h2 style={{ marginTop: "2rem" }}>üö® Alertas</h2>
          {result.alerts.length > 0 ? (
            <ul>
              {result.alerts.map((a) => (
                <li key={a.id}>
                  {a.message}{" "}
                  <em>({new Date(a.created_at).toLocaleString()})</em>
                </li>
              ))}
            </ul>
          ) : (
            <p>Sin alertas generadas.</p>
          )}
        </>
      ) : (
        <p>No hay resultados disponibles.</p>
      )}
    </main>
  );
};

export default Analyze;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Analyze.tsx
//C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Analyze.tsx
//Analyze.tsx
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import api from "../api/axios";
import EmotionChart from "../components/EmotionChart";
import "../styles/spinner.css";
import "../styles/progress.css";
import type { AnalysisResult } from "../types";

const Analyze: React.FC = () => {
  const { audioId } = useParams();
  const [result, setResult] = useState<AnalysisResult | null>(null);
  const [status, setStatus] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(true);
  const [progress, setProgress] = useState<number>(0);

  useEffect(() => {
    setLoading(true);
    setProgress(0);

    const interval = setInterval(() => {
      setProgress((prev) => (prev < 90 ? prev + 10 : prev));
    }, 200);

    api
      .get<AnalysisResult>("/analyze/by-audio", {
        params: { audio_id: audioId },
      })
      .then((res) => {
        setResult(res.data);
        setLoading(false);
        setProgress(100);
        clearInterval(interval);
      })
      .catch(() => {
        setStatus("‚ùå Error al obtener an√°lisis");
        setLoading(false);
        clearInterval(interval);
      });

    return () => clearInterval(interval);
  }, [audioId]);

  return (
    <main>
      <h1>Resultados del An√°lisis</h1>
      {status && <p>{status}</p>}

      {loading ? (
        <div style={{ textAlign: "center", marginTop: "2rem" }}>
          <div className="spinner" style={{ marginBottom: "1rem" }} />
          <div className="progress-bar">
            <div className="progress-fill" style={{ width: `${progress}%` }} />
          </div>
          <p>‚è≥ Procesando an√°lisis, por favor espera‚Ä¶</p>
        </div>
      ) : result ? (
        <>
          <EmotionChart emotions={result.emotions} audioId={result.audio_id} />

          <h2 style={{ marginTop: "2rem" }}>üö® Alertas</h2>
          {result.alerts.length > 0 ? (
            <ul>
              {result.alerts.map((a) => (
                <li key={a.id}>
                  {a.message}{" "}
                  <em>({new Date(a.created_at).toLocaleString()})</em>
                </li>
              ))}
            </ul>
          ) : (
            <p>Sin alertas generadas.</p>
          )}
        </>
      ) : (
        <p>No hay resultados disponibles.</p>
      )}
    </main>
  );
};

export default Analyze;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\AudioHistory copy.tsx
// # C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\AudioHistory.tsx
// # AudioHistory.tsx
import React, { useEffect, useState, useRef } from "react";
import api from "../api/axios";
import Table from "react-bootstrap/Table";
import Button from "react-bootstrap/Button";
import Container from "react-bootstrap/Container";
import Spinner from "react-bootstrap/Spinner";
import ProgressBar from "react-bootstrap/ProgressBar";
import type { Audio, AnalysisResult } from "../types";

interface JobInfo {
  jobId: string;
  progress: number;
}

const AudioHistory: React.FC = () => {
  const [audios, setAudios] = useState<Audio[]>([]);
  const [results, setResults] = useState<AnalysisResult[]>([]);
  const [loading, setLoading] = useState(true);
  const [jobs, setJobs] = useState<Record<number, JobInfo>>({});
  const polling = useRef<Record<string, NodeJS.Timer>>({});

  // üîÑ Refrescar resultados desde el backend
  const refreshResults = async () => {
    try {
      const rr = await api.get<AnalysisResult[]>("/analyze/results/all");
      setResults(rr.data);
    } catch (e) {
      console.error("Error al refrescar resultados:", e);
    }
  };

  // Fetch inicial de audios y resultados
  useEffect(() => {
    (async () => {
      try {
        const [ar, rr] = await Promise.all([
          api.get<Audio[]>("/audios"),
          api.get<AnalysisResult[]>("/analyze/results/all"),
        ]);
        setAudios(ar.data);
        setResults(rr.data);
      } catch (e) {
        console.error(e);
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  const isAnalyzed = (id: number) => results.some((r) => r.audio_id === id);

  // Iniciar job y arrancar polling
  const handleAnalyze = async (audio: Audio) => {
    setLoading(true);
    try {
      const res = await api.post<{ job_id: string }>("/analyze/start", null, {
        params: { audio_id: audio.id },
      });
      const jobId = res.data.job_id;
      setJobs((j) => ({ ...j, [audio.id]: { jobId, progress: 0 } }));

      const timer = setInterval(async () => {
        const st = await api.get<{
          status: string;
          progress: number;
          audio_id: number;
        }>("/analyze/status", { params: { job_id: jobId } });
        setJobs((j) => ({
          ...j,
          [audio.id]: { jobId, progress: st.data.progress },
        }));

        if (st.data.status === "done" || st.data.status === "error") {
          clearInterval(polling.current[jobId]);
          delete polling.current[jobId];

          await refreshResults();

          setJobs((j) => {
            const c = { ...j };
            delete c[audio.id];
            return c;
          });
        }
      }, 500);

      polling.current[jobId] = timer;
    } catch (err) {
      console.error("Error iniciando job:", err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container style={{ marginTop: "2rem" }}>
      <h2>üéß Audios no analizados</h2>
      {loading ? (
        <Spinner />
      ) : (
        <Table striped bordered hover>
          <thead>
            <tr>
              <th>ID</th>
              <th>Archivo</th>
              <th>Fecha</th>
              <th>Acci√≥n/Progreso</th>
            </tr>
          </thead>
          <tbody>
            {audios
              .filter((a) => !isAnalyzed(a.id))
              .map((a) => {
                const job = jobs[a.id];
                return (
                  <tr key={a.id}>
                    <td>{a.id}</td>
                    <td>{a.file_path.split("/").pop()}</td>
                    <td>{new Date(a.created_at).toLocaleString()}</td>
                    <td style={{ minWidth: 200 }}>
                      {!job ? (
                        <Button
                          variant="success"
                          onClick={() => handleAnalyze(a)}
                          disabled={loading}
                        >
                          Analizar
                        </Button>
                      ) : (
                        <ProgressBar
                          animated
                          now={job.progress}
                          label={`${job.progress}%`}
                        />
                      )}
                    </td>
                  </tr>
                );
              })}
          </tbody>
        </Table>
      )}

      <h2 className="mt-5">üìä Audios analizados</h2>
      {loading ? (
        <Spinner />
      ) : (
        <Table striped bordered hover>
          <thead>
            <tr>
              <th>ID</th>
              <th>Archivo</th>
              <th>Fecha</th>
            </tr>
          </thead>
          <tbody>
            {audios
              .filter((a) => isAnalyzed(a.id))
              .map((a) => (
                <tr key={a.id}>
                  <td>{a.id}</td>
                  <td>{a.file_path.split("/").pop()}</td>
                  <td>{new Date(a.created_at).toLocaleString()}</td>
                </tr>
              ))}
          </tbody>
        </Table>
      )}
    </Container>
  );
};

export default AudioHistory;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\AudioHistory.tsx
// # C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\AudioHistory.tsx
// # AudioHistory.tsx

import React, { useEffect, useState, useRef } from "react";
import api from "../api/axios";
import Table from "react-bootstrap/Table";
import Button from "react-bootstrap/Button";
import Container from "react-bootstrap/Container";
import Spinner from "react-bootstrap/Spinner";
import ProgressBar from "react-bootstrap/ProgressBar";
import type { Audio, AnalysisResult } from "../types";

interface JobInfo {
  jobId: string;
  progress: number;
}

const AudioHistory: React.FC = () => {
  const [audios, setAudios] = useState<Audio[]>([]);
  const [results, setResults] = useState<AnalysisResult[]>([]);
  const [loading, setLoading] = useState(true);
  const [jobs, setJobs] = useState<Record<number, JobInfo>>({});
  const polling = useRef<Record<string, NodeJS.Timer>>({});

  // üîÑ Refrescar audios y resultados
  const refreshAll = async () => {
    setLoading(true);
    try {
      const [ar, rr] = await Promise.all([
        api.get<Audio[]>("/audios"),
        api.get<AnalysisResult[]>("/analyze/results/all"),
      ]);
      setAudios(ar.data);
      setResults(rr.data);
    } catch (e) {
      console.error("Error al refrescar datos:", e);
    } finally {
      setLoading(false);
    }
  };

  // Fetch inicial
  useEffect(() => {
    refreshAll();
  }, []);

  const isAnalyzed = (id: number) => results.some((r) => r.audio_id === id);

  const handleAnalyze = async (audio: Audio) => {
    setLoading(true);
    try {
      const res = await api.post<{ job_id: string }>("/analyze/start", null, {
        params: { audio_id: audio.id },
      });
      const jobId = res.data.job_id;
      setJobs((j) => ({ ...j, [audio.id]: { jobId, progress: 0 } }));

      const timer = setInterval(async () => {
        const st = await api.get<{
          status: string;
          progress: number;
          audio_id: number;
        }>("/analyze/status", { params: { job_id: jobId } });

        setJobs((j) => ({
          ...j,
          [audio.id]: { jobId, progress: st.data.progress },
        }));

        if (st.data.status === "done" || st.data.status === "error") {
          clearInterval(polling.current[jobId]);
          delete polling.current[jobId];

          await refreshAll();

          setJobs((j) => {
            const c = { ...j };
            delete c[audio.id];
            return c;
          });
        }
      }, 500);

      polling.current[jobId] = timer;
    } catch (err) {
      console.error("Error iniciando job:", err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container style={{ marginTop: "2rem" }}>
      <h2>üìÅ Historial de audios</h2>
      <Button variant="secondary" onClick={refreshAll} className="mb-3">
        üîÑ Recargar audios y resultados
      </Button>

      {loading ? (
        <Spinner />
      ) : (
        <Table striped bordered hover>
          <thead>
            <tr>
              <th>ID</th>
              <th>Archivo</th>
              <th>Fecha</th>
              <th>Estado</th>
              <th>Acci√≥n/Progreso</th>
            </tr>
          </thead>
          <tbody>
            {audios.map((a) => {
              const job = jobs[a.id];
              const analyzed = isAnalyzed(a.id);
              return (
                <tr key={a.id}>
                  <td>{a.id}</td>
                  <td>{a.file_path.split("/").pop()}</td>
                  <td>{new Date(a.created_at).toLocaleString()}</td>
                  <td>{analyzed ? "‚úÖ Analizado" : "‚è≥ Pendiente"}</td>
                  <td style={{ minWidth: 200 }}>
                    {analyzed ? (
                      "‚úîÔ∏è"
                    ) : !job ? (
                      <Button
                        variant="success"
                        onClick={() => handleAnalyze(a)}
                        disabled={loading}
                      >
                        Analizar
                      </Button>
                    ) : (
                      <ProgressBar
                        animated
                        now={job.progress}
                        label={`${job.progress}%`}
                      />
                    )}
                  </td>
                </tr>
              );
            })}
          </tbody>
        </Table>
      )}
    </Container>
  );
};

export default AudioHistory;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Auth.tsx
// # C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Auth.tsx
// # Auth.tsx
// frontend/src/pages/Auth.tsx

import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../contexts/AuthContext";
import api from "../api/axios";

type Props = { mode: "login" | "signup" };

const Auth: React.FC<Props> = ({ mode }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();
  const { login } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    try {
      if (mode === "signup") {
        // Signup espera JSON { email, password }
        await api.post("/auth/signup", { email, password });
        navigate("/login");
      } else {
        // Login espera x-www-form-urlencoded
        const payload = new URLSearchParams();
        payload.append("username", email);
        payload.append("password", password);

        const res = await api.post("/auth/login", payload.toString(), {
          headers: { "Content-Type": "application/x-www-form-urlencoded" },
        });

        login(res.data.access_token);
        navigate("/dashboard");
      }
    } catch (err: any) {
      setError(err.response?.data?.detail || "Error inesperado");
    }
  };

  return (
    <main>
      <h1>{mode === "login" ? "Iniciar Sesi√≥n" : "Crear Cuenta"}</h1>

      <form onSubmit={handleSubmit}>
        <input
          type="email"
          placeholder="Correo electr√≥nico"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />

        <input
          type="password"
          placeholder="Contrase√±a"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />

        {error && <p style={{ color: "red" }}>{error}</p>}

        <button type="submit">
          {mode === "login" ? "Entrar" : "Registrarse"}
        </button>
      </form>
    </main>
  );
};

export default Auth;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Dashboard.tsx
// üìÑ src/pages/Dashboard.tsx

import React from "react";
import { useAuth } from "../contexts/AuthContext";
import EmotionDistributionChart from "../components/Dashboard/EmotionDistributionChart";
import SummaryCharts from "../components/SummaryCharts";

const Dashboard: React.FC = () => {
  const { isAuthenticated, user, logout } = useAuth();

  // Si no est√° autenticado, mostrar mensaje de login
  if (!isAuthenticated) {
    return (
      <main>
        <h1>Panel de Control</h1>
        <p>Inicia sesi√≥n para ver tus datos y emociones detectadas.</p>
      </main>
    );
  }

  // Si est√° autenticado pero user todav√≠a null (por alguna raz√≥n)
  if (!user) {
    return (
      <main>
        <h1>Panel de Control</h1>
        <p>Cargando informaci√≥n de usuario‚Ä¶</p>
      </main>
    );
  }

  // Usuario autenticado y cargado correctamente
  return (
    <main className="container py-4">
      <h1>Panel de Control</h1>
      <p>
        Bienvenido <strong>{user.email}</strong>, aqu√≠ tienes el resumen de
        actividad y an√°lisis recientes.
      </p>

      {/* üìä Gr√°fico de distribuci√≥n de emociones */}
      <EmotionDistributionChart />

      {/* üìà Gr√°ficos de frecuencia y criticidad global * <SummaryCharts />/}
      

      {/* üîì Logout */}
      {/*       <div className="mt-4">
        <button type="button" className="btn btn-danger" onClick={logout}>
          Cerrar sesi√≥n
        </button>
      </div> */}
    </main>
  );
};

export default Dashboard;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Home.tsx
// C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Home.tsx
// Home.tsx
import React from 'react';

const Home: React.FC = () => (
  <main>
    <h1>Bienvenido a Emotion Elderly</h1>
    <p>Sube audios de tus seres queridos para detectar sus emociones.</p>
  </main>
);

export default Home;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Loading.tsx
// src/pages/Loading.tsx
import React, { useEffect } from "react";
import { useNavigate } from "react-router-dom";

const Loading: React.FC = () => {
  const navigate = useNavigate();

  useEffect(() => {
    const timer = setTimeout(() => {
      navigate("/dashboard");
    }, 1000); // espera 1 segundo

    return () => clearTimeout(timer);
  }, [navigate]);

  return (
    <main style={{ textAlign: "center", marginTop: "3rem" }}>
      <h1>üîÑ Cargando tu panel‚Ä¶</h1>
      <p>Estamos preparando tus datos, por favor espera.</p>
    </main>
  );
};

export default Loading;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Login.tsx
// src/pages/Login.tsx
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../contexts/AuthContext";
import api from "../api/axios";
import Button from "react-bootstrap/Button";
import Form from "react-bootstrap/Form";
import Container from "react-bootstrap/Container";
import Alert from "react-bootstrap/Alert";

const Login: React.FC = () => {
  const { login } = useAuth();
  const navigate = useNavigate();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [status, setStatus] = useState("");
  const [validated, setValidated] = useState(false);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const form = e.currentTarget;

    if (!form.checkValidity()) {
      e.stopPropagation();
      setValidated(true);
      return;
    }

    setStatus("");
    setValidated(true);

    try {
      const payload = new URLSearchParams();
      payload.append("username", email);
      payload.append("password", password);

      const res = await api.post("/auth/login", payload.toString(), {
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
      });

      login(res.data.access_token);
      navigate("/loading");
    } catch (err: any) {
      setStatus("‚ùå Credenciales inv√°lidas o error de conexi√≥n");
    }
  };

  return (
    <div
      style={{
        minHeight: "100vh",
        backgroundColor: "#f0f2f5",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        fontFamily: "'Inter', sans-serif",
      }}
    >
      <Container
        style={{
          maxWidth: "420px",
          padding: "2rem",
          backgroundColor: "#fff",
          borderRadius: "10px",
          boxShadow: "0 4px 12px rgba(0,0,0,0.1)",
        }}
      >
        <h2 className="mb-4 text-center" style={{ fontWeight: 600 }}>
          Iniciar Sesi√≥n
        </h2>

        {status && <Alert variant="danger">{status}</Alert>}

        <Form noValidate validated={validated} onSubmit={handleSubmit}>
          <Form.Group controlId="formBasicEmail" className="mb-4">
            <Form.Label className="mb-2" style={{ fontWeight: 500 }}>
              Correo electr√≥nico
            </Form.Label>
            <Form.Control
              type="email"
              placeholder="Ingresa tu correo"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
            <Form.Control.Feedback type="invalid">
              Por favor ingresa un correo v√°lido.
            </Form.Control.Feedback>
          </Form.Group>

          <Form.Group controlId="formBasicPassword" className="mb-4">
            <Form.Label className="mb-2" style={{ fontWeight: 500 }}>
              Contrase√±a
            </Form.Label>
            <Form.Control
              type="password"
              placeholder="Ingresa tu contrase√±a"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
            <Form.Control.Feedback type="invalid">
              La contrase√±a es obligatoria.
            </Form.Control.Feedback>
          </Form.Group>

          <Form.Group controlId="formBasicCheckbox" className="mb-3">
            <Form.Check type="checkbox" label="Recordarme" />
          </Form.Group>

          <div className="mt-3">
            <Button
              variant="primary"
              type="submit"
              className="w-100"
              style={{ fontWeight: 500 }}
            >
              Acceder
            </Button>
          </div>
        </Form>
      </Container>
    </div>
  );
};

export default Login;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\UploadAudio.tsx
//src/pages/UploadAudio.tsx
// frontend/src/pages/UploadAudio.tsx
import React, { useState, useRef } from "react";
import api from "../api/axios";

const MAX_SIZE_MB = 10;

const UploadAudio: React.FC = () => {
  const [file, setFile] = useState<File | null>(null);
  const [message, setMessage] = useState("");
  const fileInputRef = useRef<HTMLInputElement>(null);

  const validateFile = (file: File): string | null => {
    if (!file.type.startsWith("audio/")) {
      return "‚ùå El archivo debe ser de tipo audio.";
    }
    if (file.size > MAX_SIZE_MB * 1024 * 1024) {
      return `‚ùå El archivo supera el l√≠mite de ${MAX_SIZE_MB} MB.`;
    }
    return null;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setMessage("");

    if (!file) {
      setMessage("Selecciona un archivo primero");
      return;
    }

    const error = validateFile(file);
    if (error) {
      setMessage(error);
      return;
    }

    const formData = new FormData();
    formData.append("file", file);

    try {
      const res = await api.post("/audios/", formData);
      setMessage(`‚úÖ Audio subido con ID ${res.data.id}`);
      // Limpiar estado y campo de input para evitar duplicados
      setFile(null);
      if (fileInputRef.current) {
        fileInputRef.current.value = "";
      }
    } catch (err: any) {
      setMessage(err.response?.data?.detail || "‚ùå Error al subir");
    }
  };

  return (
    <main>
      <h1>Subir Audio</h1>

      <form onSubmit={handleSubmit}>
        <input
          ref={fileInputRef}
          type="file"
          accept="audio/*"
          onChange={(e) => setFile(e.currentTarget.files?.[0] || null)}
          required
        />
        <button
          type="submit"
          disabled={!file || (file && validateFile(file) !== null)}
        >
          Enviar
        </button>
      </form>

      {message && (
        <p style={{ color: message.startsWith("‚ùå") ? "red" : "green" }}>
          {message}
        </p>
      )}
    </main>
  );
};

export default UploadAudio;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\UploadMultipleAudios.tsx
// frontend/src/pages/UploadMultipleAudios.tsx
import React, { useState } from "react";
import axios from "../api/axios";

const MAX_FILES = 20;
const MAX_SIZE_MB = 10;

const UploadMultipleAudios: React.FC = () => {
  const [files, setFiles] = useState<File[]>([]);
  const [uploading, setUploading] = useState(false);
  const [message, setMessage] = useState("");
  const [results, setResults] = useState<
    { filename: string; content_type: string; size: number }[]
  >([]);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFiles = Array.from(event.target.files || []);
    const validFiles = selectedFiles.filter(validateFile);

    if (validFiles.length > MAX_FILES) {
      setMessage(`‚ö†Ô∏è M√°ximo ${MAX_FILES} archivos permitidos.`);
      return;
    }

    setFiles(validFiles);
    setMessage("");
    setResults([]);
  };

  const validateFile = (file: File): boolean => {
    const isAudio = file.type.startsWith("audio/");
    const isSizeValid = file.size / (1024 * 1024) <= MAX_SIZE_MB;
    return isAudio && isSizeValid;
  };

  const uploadFiles = async () => {
    if (files.length === 0) {
      setMessage("‚ö†Ô∏è No hay archivos para subir.");
      return;
    }

    setUploading(true);
    setMessage("");
    setResults([]);

    try {
      const formData = new FormData();
      files.forEach((file) => {
        formData.append("files", file); // üëà campo esperado por FastAPI
      });

      const response = await axios.post("/audios/bulk", formData);

      setMessage("‚úÖ Todos los archivos se subieron correctamente.");
      setResults(
        response.data.map((audio: any) => ({
          filename: audio.file_path.split("/").pop(),
          content_type: "audio",
          size: 0, // opcional si quieres mostrar algo
        }))
      );
      setFiles([]);
    } catch (error: any) {
      console.error("Error al subir archivos:", error);
      setMessage("‚ùå Error al subir los archivos.");
    } finally {
      setUploading(false);
    }
  };

  const clearFiles = () => {
    setFiles([]);
    setMessage("");
    setResults([]);
  };

  return (
    <div style={{ padding: "1rem" }}>
      <h2>üéôÔ∏è Subir M√∫ltiples Audios</h2>

      <input
        type="file"
        multiple
        accept="audio/*"
        onChange={handleFileChange}
        disabled={uploading}
      />

      {files.length > 0 && (
        <ul>
          {files.map((file, idx) => (
            <li key={idx}>
              {file.name} ({(file.size / (1024 * 1024)).toFixed(2)} MB)
            </li>
          ))}
        </ul>
      )}

      <div style={{ marginTop: "1rem" }}>
        <button onClick={uploadFiles} disabled={uploading}>
          {uploading ? "Subiendo..." : "Subir"}
        </button>
        <button
          onClick={clearFiles}
          disabled={uploading}
          style={{ marginLeft: "1rem" }}
        >
          Limpiar
        </button>
      </div>

      {message && <p style={{ marginTop: "1rem" }}>{message}</p>}

      {results.length > 0 && (
        <div style={{ marginTop: "1rem" }}>
          <h3>üìÑ Resultados del servidor:</h3>
          <ul>
            {results.map((file, idx) => (
              <li key={idx}>
                <strong>{file.filename}</strong> ‚Äì {file.content_type},{" "}
                {(file.size / 1024).toFixed(2)} KB
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default UploadMultipleAudios;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\routes\index.tsx
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\routes\index.tsx
# index.tsx

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\routes\ProtectedRoute.tsx
//src/routes/ProtectedRoute.tsx
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

type Props = { children: React.ReactNode };

const ProtectedRoute: React.FC<Props> = ({ children }) => {
  const { isAuthenticated } = useAuth();

  return isAuthenticated ? (
    <>{children}</>
  ) : (
    <Navigate to="/login" replace />
  );
};

export default ProtectedRoute;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\styles\Form.css
form {
  display: flex;
  flex-direction: column;
  gap: 16px;
  max-width: 400px;
  margin: 0 auto;
}

input, button {
  padding: 10px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button {
  background-color: #5A5DFF;
  color: white;
  border: none;
  cursor: pointer;
}

button:hover {
  background-color: #4749cc;
}

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\styles\progress.css
.progress-bar {
  width: 80%;
  height: 20px;
  background-color: #eee;
  border-radius: 10px;
  overflow: hidden;
  margin: 0 auto 1rem;
}

.progress-fill {
  height: 100%;
  background-color: #5a5dff;
  transition: width 0.3s ease;
}

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\styles\spinner.css
.spinner {
  border: 6px solid #f3f3f3;
  border-top: 6px solid #5a5dff;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
  margin: 0 auto;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\styles\theme.ts
// C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\styles\theme.ts
// theme.ts
export const theme = {
  colors: {
    primary: '#5A5DFF',
    secondary: '#FFA34D',
    background: '#F9FAFB',
    text: '#333333',
    error: '#E63946',
    success: '#2A9D8F',
  },
  spacing: {
    sm: '8px',
    md: '16px',
    lg: '24px',
  },
  font: {
    family: 'Arial, sans-serif',
    size: '16px',
    weight: '400',
  },
};

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\types\index.ts
// src/types/index.ts

export interface Emotion {
  id: number;
  audio_id: number;
  label: string;
  confidence: number;
  timestamp: string;
}

export interface AlertRead {
  id: number;
  user_id: number;
  message: string;
  created_at: string;
  emotion: Emotion;
}

export interface Audio {
  id: number;
  file_path: string;
  created_at: string;
}

export interface AnalysisResult {
  audio_id: number;
  emotions: Emotion[];
  alerts: AlertRead[];
}

export interface AnalysisResult {
  audio_id: number;
  emotions: { label: string; confidence: number; timestamp: string }[];
  alerts: unknown[];
}

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\utils\formatDate.ts
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\utils\formatDate.ts
# formatDate.ts

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\tests\integration\.gitkeep
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\tests\integration\.gitkeep
# .gitkeep

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\tests\unit\.gitkeep
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\tests\unit\.gitkeep
# .gitkeep

