Creado el 2025-07-28 13:17:57

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\.gitignore
__pycache__
.venv
*.keras
sonido/
----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\package-lock.json
{
  "name": "emotion-elderly-app",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {}
}

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\README.md
# Proyecto Emotion Elderly App

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\.env
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\.env.example
# .env.example

VITE_API_URL=http://localhost:8000


----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\.env.example
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\.env.example
# .env.example

VITE_API_URL=http://localhost:8000


----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\.gitignore
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\eslint.config.js
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\tsconfig.app.json
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting y seguridad */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,
    "erasableSyntaxOnly": true,

    /* Compatibilidad */
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "skipLibCheck": true
  },
  "include": ["src"]
}

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\tsconfig.json
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\tsconfig.node.json
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting y seguridad */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,
    "erasableSyntaxOnly": true,

    /* Compatibilidad */
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "skipLibCheck": true
  },
  "include": ["vite.config.ts"]
}

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\public\index.html
<!-- # C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\public\index.html
# index.html -->

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" href="/favicon.ico" />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap"
      rel="stylesheet"
    />
    <title>Emotion Elderly</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\App.tsx
//C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\App.tsx
//frontend\src\App.tsx
import React from "react";
import { Routes, Route, Navigate } from "react-router-dom";

import Login from "./pages/Login";
import Auth from "./pages/Auth";
import Loading from "./pages/Loading"; // ✅ pantalla de carga

import Dashboard from "./pages/Dashboard";
import AudioHistory from "./pages/AudioHistory";
import Alerts from "./pages/Alerts";
import Analyze from "./pages/Analyze";
import UploadAudio from "./pages/UploadAudio";

import PrivateRoute from "./components/PrivateRoute";
import Layout from "./components/layout/Layout";

const App: React.FC = () => (
  <Routes>
    {/* Rutas públicas */}
    <Route path="/" element={<Navigate to="/login" replace />} />
    <Route path="/login" element={<Login />} />
    <Route path="/signup" element={<Auth mode="signup" />} />
    <Route path="/loading" element={<Loading />} />

    {/* Rutas privadas */}
    <Route element={<PrivateRoute />}>
      <Route element={<Layout />}>
        <Route path="/dashboard" element={<Dashboard />} />
        <Route path="/audios" element={<AudioHistory />} />
        <Route path="/alerts" element={<Alerts />} />
        <Route path="/analyze" element={<Analyze />} />
        <Route path="/analyze/:audioId" element={<Analyze />} />{" "}
        {/* ✅ nueva ruta dinámica */}
        <Route path="/upload" element={<UploadAudio />} />
      </Route>
    </Route>

    {/* Catch-all */}
    <Route path="*" element={<Navigate to="/login" replace />} />
  </Routes>
);

export default App;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\index.tsx
// # C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\index.tsx
// # index.tsx
// src/index.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { AuthProvider } from "./contexts/AuthContext";
import "./index.css"; // tus estilos globales

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);
root.render(
  <React.StrictMode>
    <AuthProvider>
      <App />
    </AuthProvider>
  </React.StrictMode>
);

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\main.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { BrowserRouter } from "react-router-dom";
import { AuthProvider } from "./contexts/AuthContext";
import ErrorBoundary from "./components/ErrorBoundary";

// ✅ Importa los estilos de Bootstrap
import "bootstrap/dist/css/bootstrap.min.css";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <ErrorBoundary>
      <BrowserRouter>
        <AuthProvider>
          <App />
        </AuthProvider>
      </BrowserRouter>
    </ErrorBoundary>
  </React.StrictMode>
);

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\vite-env.d.ts
/// <reference types="vite/client" />

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\api\axios.ts
// C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\api\axios.ts
// frontend/src/api/axios.ts
// src/api/axios.ts
import axios from "axios";

const api = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL || "http://localhost:8000",
});

// Interceptor que añade el Bearer token si existe
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("access_token");
    if (token && config.headers) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    console.error("❌ Error en interceptor de axios:", error);
    return Promise.reject(error);
  }
);

export default api;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\assets\.gitkeep
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\assets\.gitkeep
# .gitkeep

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\EmotionChart.tsx
// frontend/src/components/EmotionChart.tsx
import React from "react";
import { Bar } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Tooltip,
  Legend,
} from "chart.js";
import ChartDataLabels from "chartjs-plugin-datalabels";

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Tooltip,
  Legend,
  ChartDataLabels
);

type Emotion = {
  label: string;
  confidence: number;
};

const emotionColors: Record<string, string> = {
  Tristeza: "#5DADE2",
  Alegría: "#F7DC6F",
  Miedo: "#A569BD",
  Enojo: "#E74C3C",
  Desagrado: "#58D68D",
};

type Props = {
  emotions: Emotion[];
  audioId: number;
};

const EmotionChart: React.FC<Props> = ({ emotions, audioId }) => {
  if (!emotions || emotions.length === 0) {
    return <p>⚠️ No se detectaron emociones en este audio.</p>;
  }

  const validEmotions = emotions.filter(
    (e) => typeof e.label === "string" && typeof e.confidence === "number"
  );

  if (validEmotions.length === 0) {
    return <p>⚠️ Los datos de emociones están incompletos o corruptos.</p>;
  }

  const data = {
    labels: validEmotions.map((e) => e.label),
    datasets: [
      {
        label: "Confianza (%)",
        data: validEmotions.map((e) => e.confidence * 100),
        backgroundColor: validEmotions.map(
          (e) => emotionColors[e.label] || "#ccc"
        ),
        datalabels: {
          anchor: "end",
          align: "top",
          formatter: (value: number) => `${value.toFixed(1)}%`,
          color: "#333",
          font: {
            weight: "bold",
          },
        },
      },
    ],
  };

  const options = {
    plugins: {
      legend: { display: false },
      datalabels: {
        display: true,
      },
    },
    scales: {
      y: {
        beginAtZero: true,
        max: 100,
        ticks: {
          callback: (value: number) => `${value}%`,
        },
      },
    },
    responsive: true,
    maintainAspectRatio: false,
  };

  return (
    <section>
      <h2>🎭 Emociones detectadas en el audio #{audioId}</h2>
      <div style={{ maxWidth: "600px", margin: "0 auto", height: "300px" }}>
        <Bar data={data} options={options} />
      </div>

      <div style={{ marginTop: "1rem" }}>
        <h3>🎨 Leyenda de emociones</h3>
        <ul style={{ listStyle: "none", padding: 0 }}>
          {Object.entries(emotionColors).map(([label, color]) => (
            <li
              key={label}
              style={{
                display: "flex",
                alignItems: "center",
                marginBottom: "4px",
              }}
            >
              <div
                style={{
                  width: "16px",
                  height: "16px",
                  backgroundColor: color,
                  marginRight: "8px",
                  borderRadius: "4px",
                }}
              />
              {label}
            </li>
          ))}
        </ul>
      </div>
    </section>
  );
};

export default EmotionChart;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\PrivateRoute.tsx
// src/components/PrivateRoute.tsx
import { Navigate, Outlet } from "react-router-dom";

const PrivateRoute = () => {
  const token = localStorage.getItem("access_token");

  // Puedes agregar lógica adicional si el token debe ser validado
  return token ? <Outlet /> : <Navigate to="/login" replace />;
};

export default PrivateRoute;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\common\.gitkeep
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\common\.gitkeep
# .gitkeep

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\layout\.gitkeep
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\layout\.gitkeep
# .gitkeep

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\layout\Footer.tsx
// src/components/layout/Footer.tsx
import React from "react";

const Footer: React.FC = () => (
  <footer
    style={{
      textAlign: "center",
      padding: "1rem 0",
      borderTop: "1px solid #eaeaea",
      marginTop: "2rem",
    }}
  >
    <small>© {new Date().getFullYear()} Emotion Elderly</small>
  </footer>
);

export default Footer;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\layout\Layout.tsx
import React from "react";
import Navbar from "./Navbar";
import { Outlet } from "react-router-dom";

const Layout: React.FC = () => {
  return (
    <>
      <Navbar />
      <main style={{ padding: "1rem" }}>
        <Outlet />
      </main>
    </>
  );
};

export default Layout;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\layout\Navbar.css
nav {
  display: flex;
  gap: 12px;
  padding: 12px;
  background-color: #5A5DFF;
  color: white;
}

nav a {
  color: white;
  text-decoration: none;
  font-weight: bold;
}

nav button {
  background-color: transparent;
  border: none;
  color: white;
  cursor: pointer;
}

nav button:hover, nav a:hover {
  text-decoration: underline;
}

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\layout\Navbar.tsx
//src/components/layout/Navbar.tsx
// 📄 src/components/layout/Navbar.tsx

import React from "react";
import { Link, useNavigate } from "react-router-dom";
import { useAuth } from "../../contexts/AuthContext";
import "./Navbar.css";

const Navbar: React.FC = () => {
  const { isAuthenticated, user, logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate("/login"); // ✅ redirige a login después de cerrar sesión
  };

  return (
    <nav>
      <Link to="/">Inicio</Link>

      {isAuthenticated ? (
        <>
          <Link to="/dashboard">Dashboard</Link>
          <Link to="/audios">Audios</Link>
          <Link to="/alerts">Alertas</Link>
          <Link to="/upload">Subir Audio</Link>

          {/* 👤 Info del usuario logueado */}
          {user && (
            <span style={{ marginLeft: "auto" }}>
              👤 <strong>{user.email}</strong>
            </span>
          )}
          <button onClick={handleLogout}>Cerrar sesión</button>
        </>
      ) : (
        <>
          <Link to="/login">Login</Link>
          <Link to="/signup">Registrarse</Link>
        </>
      )}
    </nav>
  );
};

export default Navbar;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\components\ErrorBoundary.tsx
import React from "react";

type Props = {
  children: React.ReactNode;
};

type State = {
  hasError: boolean;
};

class ErrorBoundary extends React.Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(_: Error): State {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error("🛑 Error capturado por ErrorBoundary:", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <main style={{ padding: "2rem", textAlign: "center" }}>
          <h1>😢 Algo salió mal</h1>
          <p>Intenta recargar la página o volver más tarde.</p>
        </main>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\contexts\.gitkeep
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\contexts\.gitkeep
# .gitkeep

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\contexts\AuthContext.tsx
// src/contexts/AuthContext.tsx

import React, {
  createContext,
  useState,
  useEffect,
  useContext,
  ReactNode,
} from "react";

type DecodedToken = {
  sub: string;
  exp?: number;
  iat?: number;
  // añade aquí más campos si tu token los incluye
};

type User = {
  id: string;
};

type AuthContextType = {
  user: User | null;
  isAuthenticated: boolean;
  login: (token: string) => void;
  logout: () => void;
};

const AuthContext = createContext<AuthContextType | undefined>(undefined);

/**
 * Decodifica sin librerías externas.
 * Al separar el token en 3 partes y hacer atob sobre la segunda,
 * obtenemos el JSON del payload.
 */
function parseJwt(token: string): DecodedToken {
  try {
    const base64Url = token.split(".")[1];
    const base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
    const json = decodeURIComponent(
      atob(base64)
        .split("")
        .map((c) => "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2))
        .join("")
    );
    return JSON.parse(json);
  } catch {
    throw new Error("Invalid token format");
  }
}

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);

  const login = (token: string) => {
    localStorage.setItem("access_token", token);
    try {
      const payload = parseJwt(token);
      setUser({ id: payload.sub });
    } catch (err) {
      console.error("Error al parsear token en AuthProvider:", err);
      logout();
    }
  };

  const logout = () => {
    localStorage.removeItem("access_token");
    setUser(null);
  };

  // Al montar, comprobamos si hay token y lo parseamos
  useEffect(() => {
    const token = localStorage.getItem("access_token");
    if (token) {
      login(token);
    }
  }, []);

  return (
    <AuthContext.Provider
      value={{
        user,
        isAuthenticated: Boolean(user),
        login,
        logout,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const ctx = useContext(AuthContext);
  if (!ctx) {
    throw new Error("useAuth debe usarse dentro de AuthProvider");
  }
  return ctx;
};

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\hooks\.gitkeep
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\hooks\.gitkeep
# .gitkeep

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Alerts.tsx
// frontend/src/pages/Alerts.tsx
import React, { useState, useEffect } from "react";
import axios from "axios";
import { Audio, AnalysisResult } from "../types";

const Alerts: React.FC = () => {
  const [audios, setAudios] = useState<Audio[]>([]);
  const [analysis, setAnalysis] = useState<AnalysisResult | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string>("");

  // 1) Cargar historial de audios
  useEffect(() => {
    axios
      .get<Audio[]>("http://localhost:8000/audios", { withCredentials: true })
      .then((res) => setAudios(res.data))
      .catch(() => setError("No se pudieron cargar los audios"));
  }, []);

  // 2) Función para pedir análisis de un audio
  const handleAnalyze = async (audioId: number) => {
    setError("");
    setLoading(true);
    setAnalysis(null);

    try {
      const res = await axios.get<AnalysisResult>(
        `http://localhost:8000/analyze?audio_id=${audioId}`,
        { withCredentials: true }
      );
      setAnalysis(res.data);
    } catch {
      setError("Error al obtener el análisis");
    } finally {
      setLoading(false);
    }
  };

  // 3) Render del informe según requisitos
  const renderReport = () => {
    if (!analysis) return null;

    // Ordenar emociones y quedarnos con las 4 críticas
    const top4 = [...analysis.emotions]
      .sort((a, b) => b.confidence - a.confidence)
      .slice(0, 4);

    // Agrupar niveles de urgencia
    const alto = top4.filter((e) => e.confidence >= 0.12);
    const medio = top4.filter(
      (e) => e.confidence >= 0.1 && e.confidence < 0.12
    );
    const bajo = top4.filter((e) => e.confidence >= 0.05 && e.confidence < 0.1);

    // Timestamp de la primera alerta o ahora
    const ts = analysis.alerts[0]?.created_at ?? new Date().toISOString();

    return (
      <div style={{ marginTop: 20, padding: 16, border: "1px solid #ccc" }}>
        <h2>Alerta para el asistente del adulto mayor</h2>
        <p>
          <strong>Momento de detección:</strong> {new Date(ts).toLocaleString()}
        </p>

        <h3>1. Resumen de emociones críticas</h3>
        <ul>
          {top4.map((e) => (
            <li key={e.id}>
              {e.label} ({e.confidence.toFixed(2)})
            </li>
          ))}
        </ul>

        <h3>2. Nivel de urgencia</h3>
        <p>
          <strong>Alto (≥ 0.12):</strong>{" "}
          {alto.map((e) => e.label).join(", ") || "—"}
        </p>
        <p>
          <strong>Medio (0.10–0.12):</strong>{" "}
          {medio.map((e) => e.label).join(", ") || "—"}
        </p>
        <p>
          <strong>Bajo (0.05–0.10):</strong>{" "}
          {bajo.map((e) => e.label).join(", ") || "—"}
        </p>

        <p>
          La combinación de{" "}
          {alto.length > 0
            ? "emociones en alto nivel"
            : "emociones moderadas/bajas"}{" "}
          requiere acción inmediata.
        </p>
      </div>
    );
  };

  return (
    <div style={{ padding: 24 }}>
      <h1>🚨 Alertas</h1>
      {error && <p style={{ color: "red" }}>{error}</p>}

      <ul>
        {audios.map((a) => (
          <li key={a.id} style={{ marginBottom: 8 }}>
            <span>{new Date(a.created_at).toLocaleString()}</span>
            <button
              style={{ marginLeft: 12 }}
              onClick={() => handleAnalyze(a.id)}
            >
              Análisis
            </button>
          </li>
        ))}
      </ul>

      {loading && <p>Cargando análisis…</p>}
      {renderReport()}
    </div>
  );
};

export default Alerts;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Analyze.tsx
//C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Analyze.tsx
//Analyze.tsx
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import api from "../api/axios";
import EmotionChart from "../components/EmotionChart";
import "../styles/spinner.css";
import "../styles/progress.css";

type Emotion = {
  id: number;
  label: string;
  confidence: number;
  timestamp: string;
};

type Alert = {
  id: number;
  message: string;
  created_at: string;
};

const Analyze: React.FC = () => {
  const { audioId } = useParams();
  const [result, setResult] = useState<{
    emotions: Emotion[];
    alerts: Alert[];
  } | null>(null);
  const [status, setStatus] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(true);
  const [progress, setProgress] = useState<number>(0);

  useEffect(() => {
    setLoading(true);
    setProgress(0);

    const interval = setInterval(() => {
      setProgress((prev) => (prev < 90 ? prev + 10 : prev));
    }, 200);

    api
      .get(`/analyze/?audio_id=${audioId}`)
      .then((res) => {
        setResult({ emotions: res.data.emotions, alerts: res.data.alerts });
        setLoading(false);
        setProgress(100);
        clearInterval(interval);
      })
      .catch(() => {
        setStatus("❌ Error al obtener análisis");
        setLoading(false);
        clearInterval(interval);
      });

    return () => clearInterval(interval);
  }, [audioId]);

  return (
    <main>
      <h1>Resultados del Análisis</h1>
      {status && <p>{status}</p>}

      {loading ? (
        <div style={{ textAlign: "center", marginTop: "2rem" }}>
          <div className="spinner" style={{ marginBottom: "1rem" }} />
          <div className="progress-bar">
            <div className="progress-fill" style={{ width: `${progress}%` }} />
          </div>
          <p>⏳ Procesando análisis, por favor espera…</p>
        </div>
      ) : result ? (
        <>
          <EmotionChart emotions={result.emotions} audioId={Number(audioId)} />

          <h2 style={{ marginTop: "2rem" }}>🚨 Alertas</h2>
          {result.alerts.length > 0 ? (
            <ul>
              {result.alerts.map((a) => (
                <li key={a.id}>
                  {a.message}{" "}
                  <em>({new Date(a.created_at).toLocaleString()})</em>
                </li>
              ))}
            </ul>
          ) : (
            <p>Sin alertas generadas.</p>
          )}
        </>
      ) : (
        <p>No hay resultados disponibles.</p>
      )}
    </main>
  );
};

export default Analyze;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\AudioHistory.tsx
// # C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\AudioHistory.tsx
// # AudioHistory.tsx

import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import api from "../api/axios";
import Table from "react-bootstrap/Table";
import Button from "react-bootstrap/Button";
import Container from "react-bootstrap/Container";
import Spinner from "react-bootstrap/Spinner";

type Audio = {
  id: number;
  file_path: string;
  created_at: string;
};

type Emotion = {
  id: number;
  audio_id: number;
};

const AudioHistory: React.FC = () => {
  const navigate = useNavigate();
  const [audios, setAudios] = useState<Audio[]>([]);
  const [emotions, setEmotions] = useState<Emotion[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchAudios = async () => {
      try {
        const [audioRes, emotionRes] = await Promise.all([
          api.get("/audios"),
          api.get("/analyze/emotions"),
        ]);

        setAudios(audioRes.data);
        setEmotions(emotionRes.data);
      } catch (err) {
        console.error("Error al cargar audios o emociones", err);
      } finally {
        setLoading(false);
      }
    };
    fetchAudios();
  }, []);

  const isAnalyzed = (audioId: number) =>
    emotions.some((e) => e.audio_id === audioId);

  // Nuevo: dispara el análisis POST y luego navega
  const handleAnalyze = async (id: number) => {
    setLoading(true);
    try {
      await api.post(`/analyze/?audio_id=${id}`);
      navigate(`/analyze/${id}`);
    } catch (err) {
      console.error("Error al iniciar análisis:", err);
    } finally {
      setLoading(false);
    }
  };

  const handleView = (id: number) => {
    navigate(`/analyze/${id}`);
  };

  const audiosNoAnalizados = audios.filter((a) => !isAnalyzed(a.id));
  const audiosAnalizados = audios.filter((a) => isAnalyzed(a.id));

  return (
    <Container style={{ marginTop: "2rem" }}>
      <h2 className="mb-4">🎧 Audios no analizados</h2>
      {loading ? (
        <Spinner animation="border" />
      ) : audiosNoAnalizados.length === 0 ? (
        <p>No hay audios pendientes de análisis.</p>
      ) : (
        <Table striped bordered hover>
          <thead>
            <tr>
              <th>ID</th>
              <th>Archivo</th>
              <th>Fecha</th>
              <th>Acción</th>
            </tr>
          </thead>
          <tbody>
            {audiosNoAnalizados.map((audio) => (
              <tr key={audio.id}>
                <td>{audio.id}</td>
                <td>{audio.file_path.split("/").pop()}</td>
                <td>{new Date(audio.created_at).toLocaleString()}</td>
                <td>
                  <Button
                    variant="success"
                    onClick={() => handleAnalyze(audio.id)}
                    disabled={loading}
                  >
                    Analizar
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      )}

      <h2 className="mt-5 mb-4">📊 Audios analizados</h2>
      {loading ? (
        <Spinner animation="border" />
      ) : audiosAnalizados.length === 0 ? (
        <p>No hay audios analizados aún.</p>
      ) : (
        <Table striped bordered hover>
          <thead>
            <tr>
              <th>ID</th>
              <th>Archivo</th>
              <th>Fecha</th>
              <th>Acción</th>
            </tr>
          </thead>
          <tbody>
            {audiosAnalizados.map((audio) => (
              <tr key={audio.id}>
                <td>{audio.id}</td>
                <td>{audio.file_path.split("/").pop()}</td>
                <td>{new Date(audio.created_at).toLocaleString()}</td>
                <td>
                  <Button variant="info" onClick={() => handleView(audio.id)}>
                    Ver gráfica
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      )}
    </Container>
  );
};

export default AudioHistory;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Auth.tsx
// # C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Auth.tsx
// # Auth.tsx
// frontend/src/pages/Auth.tsx

import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../contexts/AuthContext";
import api from "../api/axios";

type Props = { mode: "login" | "signup" };

const Auth: React.FC<Props> = ({ mode }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();
  const { login } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    try {
      if (mode === "signup") {
        // Signup espera JSON { email, password }
        await api.post("/auth/signup", { email, password });
        navigate("/login");
      } else {
        // Login espera x-www-form-urlencoded
        const payload = new URLSearchParams();
        payload.append("username", email);
        payload.append("password", password);

        const res = await api.post("/auth/login", payload.toString(), {
          headers: { "Content-Type": "application/x-www-form-urlencoded" },
        });

        login(res.data.access_token);
        navigate("/dashboard");
      }
    } catch (err: any) {
      setError(err.response?.data?.detail || "Error inesperado");
    }
  };

  return (
    <main>
      <h1>{mode === "login" ? "Iniciar Sesión" : "Crear Cuenta"}</h1>

      <form onSubmit={handleSubmit}>
        <input
          type="email"
          placeholder="Correo electrónico"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />

        <input
          type="password"
          placeholder="Contraseña"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />

        {error && <p style={{ color: "red" }}>{error}</p>}

        <button type="submit">
          {mode === "login" ? "Entrar" : "Registrarse"}
        </button>
      </form>
    </main>
  );
};

export default Auth;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Dashboard.tsx
// 📄 src/pages/Dashboard.tsx

import React from "react";
import { useAuth } from "../contexts/AuthContext";

const Dashboard: React.FC = () => {
  const { isAuthenticated, user, logout } = useAuth();

  // Si no está autenticado, mostrar mensaje de login
  if (!isAuthenticated) {
    return (
      <main>
        <h1>Panel de Control</h1>
        <p>Inicia sesión para ver tus datos y emociones detectadas.</p>
      </main>
    );
  }

  // Si está autenticado pero user todavía null (por alguna razón)
  if (!user) {
    return (
      <main>
        <h1>Panel de Control</h1>
        <p>Cargando información de usuario…</p>
      </main>
    );
  }

  // Usuario autenticado y cargado correctamente
  return (
    <main>
      <h1>Panel de Control</h1>
      <p>
        Bienvenido <strong>{user.email}</strong>, aquí tienes el resumen de
        actividad y análisis recientes.
      </p>

      {/* Aquí puedes agregar tu componente o lógica para mostrar datos/emociones */}
      {/* por ejemplo: <ActivitySummary data={activityData} /> */}

      <button type="button" onClick={logout}>
        Cerrar sesión
      </button>
    </main>
  );
};

export default Dashboard;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Home.tsx
// C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Home.tsx
// Home.tsx
import React from 'react';

const Home: React.FC = () => (
  <main>
    <h1>Bienvenido a Emotion Elderly</h1>
    <p>Sube audios de tus seres queridos para detectar sus emociones.</p>
  </main>
);

export default Home;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\Login.tsx
// src/pages/Login.tsx
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../contexts/AuthContext";
import api from "../api/axios";
import Button from "react-bootstrap/Button";
import Form from "react-bootstrap/Form";
import Container from "react-bootstrap/Container";
import Alert from "react-bootstrap/Alert";

const Login: React.FC = () => {
  const { login } = useAuth();
  const navigate = useNavigate();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [status, setStatus] = useState("");
  const [validated, setValidated] = useState(false);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const form = e.currentTarget;

    if (!form.checkValidity()) {
      e.stopPropagation();
      setValidated(true);
      return;
    }

    setStatus("");
    setValidated(true);

    try {
      const payload = new URLSearchParams();
      payload.append("username", email);
      payload.append("password", password);

      const res = await api.post("/auth/login", payload.toString(), {
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
      });

      login(res.data.access_token);
      navigate("/loading");
    } catch (err: any) {
      setStatus("❌ Credenciales inválidas o error de conexión");
    }
  };

  return (
    <div
      style={{
        minHeight: "100vh",
        backgroundColor: "#f0f2f5",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        fontFamily: "'Inter', sans-serif",
      }}
    >
      <Container
        style={{
          maxWidth: "420px",
          padding: "2rem",
          backgroundColor: "#fff",
          borderRadius: "10px",
          boxShadow: "0 4px 12px rgba(0,0,0,0.1)",
        }}
      >
        <h2 className="mb-4 text-center" style={{ fontWeight: 600 }}>
          Iniciar Sesión
        </h2>

        {status && <Alert variant="danger">{status}</Alert>}

        <Form noValidate validated={validated} onSubmit={handleSubmit}>
          <Form.Group controlId="formBasicEmail" className="mb-4">
            <Form.Label className="mb-2" style={{ fontWeight: 500 }}>
              Correo electrónico
            </Form.Label>
            <Form.Control
              type="email"
              placeholder="Ingresa tu correo"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
            <Form.Control.Feedback type="invalid">
              Por favor ingresa un correo válido.
            </Form.Control.Feedback>
          </Form.Group>

          <Form.Group controlId="formBasicPassword" className="mb-4">
            <Form.Label className="mb-2" style={{ fontWeight: 500 }}>
              Contraseña
            </Form.Label>
            <Form.Control
              type="password"
              placeholder="Ingresa tu contraseña"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
            <Form.Control.Feedback type="invalid">
              La contraseña es obligatoria.
            </Form.Control.Feedback>
          </Form.Group>

          <Form.Group controlId="formBasicCheckbox" className="mb-3">
            <Form.Check type="checkbox" label="Recordarme" />
          </Form.Group>

          <div className="mt-3">
            <Button
              variant="primary"
              type="submit"
              className="w-100"
              style={{ fontWeight: 500 }}
            >
              Acceder
            </Button>
          </div>
        </Form>
      </Container>
    </div>
  );
};

export default Login;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\pages\UploadAudio.tsx
//src/pages/UploadAudio.tsx
import React, { useState } from "react";
import api from "../api/axios";

const MAX_SIZE_MB = 10;

const UploadAudio: React.FC = () => {
  const [file, setFile] = useState<File | null>(null);
  const [message, setMessage] = useState("");

  const validateFile = (file: File): string | null => {
    if (!file.type.startsWith("audio/")) {
      return "❌ El archivo debe ser de tipo audio.";
    }
    if (file.size > MAX_SIZE_MB * 1024 * 1024) {
      return `❌ El archivo supera el límite de ${MAX_SIZE_MB} MB.`;
    }
    return null;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setMessage("");

    if (!file) {
      setMessage("Selecciona un archivo primero");
      return;
    }

    const error = validateFile(file);
    if (error) {
      setMessage(error);
      return;
    }

    const formData = new FormData();
    formData.append("file", file);

    try {
      const res = await api.post("/audios/", formData);
      setMessage(`✅ Audio subido con ID ${res.data.id}`);
    } catch (err: any) {
      setMessage(err.response?.data?.detail || "❌ Error al subir");
    }
  };

  return (
    <main>
      <h1>Subir Audio</h1>

      <form onSubmit={handleSubmit}>
        <input
          type="file"
          accept="audio/*"
          onChange={(e) => setFile(e.target.files?.[0] || null)}
          required
        />
        <button
          type="submit"
          disabled={!file || (file && validateFile(file) !== null)}
        >
          Enviar
        </button>
      </form>

      {message && (
        <p style={{ color: message.startsWith("❌") ? "red" : "green" }}>
          {message}
        </p>
      )}
    </main>
  );
};

export default UploadAudio;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\routes\index.tsx
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\routes\index.tsx
# index.tsx

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\routes\ProtectedRoute.tsx
//src/routes/ProtectedRoute.tsx
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

type Props = { children: React.ReactNode };

const ProtectedRoute: React.FC<Props> = ({ children }) => {
  const { isAuthenticated } = useAuth();

  return isAuthenticated ? (
    <>{children}</>
  ) : (
    <Navigate to="/login" replace />
  );
};

export default ProtectedRoute;

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\styles\spinner.css
.spinner {
  border: 6px solid #f3f3f3;
  border-top: 6px solid #5a5dff;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
  margin: 0 auto;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\styles\Form.css
form {
  display: flex;
  flex-direction: column;
  gap: 16px;
  max-width: 400px;
  margin: 0 auto;
}

input, button {
  padding: 10px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button {
  background-color: #5A5DFF;
  color: white;
  border: none;
  cursor: pointer;
}

button:hover {
  background-color: #4749cc;
}

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\styles\theme.ts
// C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\styles\theme.ts
// theme.ts
export const theme = {
  colors: {
    primary: '#5A5DFF',
    secondary: '#FFA34D',
    background: '#F9FAFB',
    text: '#333333',
    error: '#E63946',
    success: '#2A9D8F',
  },
  spacing: {
    sm: '8px',
    md: '16px',
    lg: '24px',
  },
  font: {
    family: 'Arial, sans-serif',
    size: '16px',
    weight: '400',
  },
};

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\styles\progress.css
.progress-bar {
  width: 80%;
  height: 20px;
  background-color: #eee;
  border-radius: 10px;
  overflow: hidden;
  margin: 0 auto 1rem;
}

.progress-fill {
  height: 100%;
  background-color: #5a5dff;
  transition: width 0.3s ease;
}

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\utils\formatDate.ts
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\utils\formatDate.ts
# formatDate.ts

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\tests\integration\.gitkeep
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\tests\integration\.gitkeep
# .gitkeep

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\tests\unit\.gitkeep
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\tests\unit\.gitkeep
# .gitkeep

----------------------------------------
# C:\americo\ia_dema\z-proyeto_final\emotion-elderly-app\frontend\src\types\index.ts
// src/types/index.ts

export interface Emotion {
  id: number;
  audio_id: number;
  label: string;
  confidence: number;
  timestamp: string;
}

export interface AlertRead {
  id: number;
  user_id: number;
  message: string;
  created_at: string;
  emotion: Emotion;
}

export interface Audio {
  id: number;
  file_path: string;
  created_at: string;
}

export interface AnalysisResult {
  audio_id: number;
  emotions: Emotion[];
  alerts: AlertRead[];
}

